// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2023 22:51:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    topmodule
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module topmodule_vlg_sample_tst(
	clk,
	rst,
	sampler_tx
);
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module topmodule_vlg_check_tst (
	ALUCnt,
	ALUFlags_w,
	ALUOutW,
	CondE,
	FlagWrite,
	FlagWriteD,
	FlagWriteE,
	Flags,
	Inst,
	PCSrcM,
	PC_out,
	RD1,
	RD2,
	REGWr,
	ReadDataW,
	condEx,
	sampler_rx
);
input [3:0] ALUCnt;
input [3:0] ALUFlags_w;
input [31:0] ALUOutW;
input [3:0] CondE;
input [1:0] FlagWrite;
input [1:0] FlagWriteD;
input [1:0] FlagWriteE;
input [3:0] Flags;
input [31:0] Inst;
input  PCSrcM;
input [31:0] PC_out;
input [31:0] RD1;
input [31:0] RD2;
input  REGWr;
input [31:0] ReadDataW;
input  condEx;
input sampler_rx;

reg [3:0] ALUCnt_expected;
reg [3:0] ALUFlags_w_expected;
reg [31:0] ALUOutW_expected;
reg [3:0] CondE_expected;
reg [1:0] FlagWrite_expected;
reg [1:0] FlagWriteD_expected;
reg [1:0] FlagWriteE_expected;
reg [3:0] Flags_expected;
reg [31:0] Inst_expected;
reg  PCSrcM_expected;
reg [31:0] PC_out_expected;
reg [31:0] RD1_expected;
reg [31:0] RD2_expected;
reg  REGWr_expected;
reg [31:0] ReadDataW_expected;
reg  condEx_expected;

reg [3:0] ALUCnt_prev;
reg [3:0] ALUFlags_w_prev;
reg [31:0] ALUOutW_prev;
reg [3:0] CondE_prev;
reg [1:0] FlagWrite_prev;
reg [1:0] FlagWriteD_prev;
reg [1:0] FlagWriteE_prev;
reg [3:0] Flags_prev;
reg [31:0] Inst_prev;
reg  PCSrcM_prev;
reg [31:0] PC_out_prev;
reg [31:0] RD1_prev;
reg [31:0] RD2_prev;
reg  REGWr_prev;
reg [31:0] ReadDataW_prev;
reg  condEx_prev;

reg [3:0] ALUCnt_expected_prev;
reg [3:0] ALUFlags_w_expected_prev;
reg [31:0] ALUOutW_expected_prev;
reg [3:0] CondE_expected_prev;
reg [1:0] FlagWrite_expected_prev;
reg [1:0] FlagWriteD_expected_prev;
reg [1:0] FlagWriteE_expected_prev;
reg [3:0] Flags_expected_prev;
reg [31:0] Inst_expected_prev;
reg  PCSrcM_expected_prev;
reg [31:0] PC_out_expected_prev;
reg [31:0] RD1_expected_prev;
reg [31:0] RD2_expected_prev;
reg  REGWr_expected_prev;
reg [31:0] ReadDataW_expected_prev;
reg  condEx_expected_prev;

reg [3:0] last_ALUCnt_exp;
reg [3:0] last_ALUFlags_w_exp;
reg [31:0] last_ALUOutW_exp;
reg [3:0] last_CondE_exp;
reg [1:0] last_FlagWrite_exp;
reg [1:0] last_FlagWriteD_exp;
reg [1:0] last_FlagWriteE_exp;
reg [3:0] last_Flags_exp;
reg [31:0] last_Inst_exp;
reg  last_PCSrcM_exp;
reg [31:0] last_PC_out_exp;
reg [31:0] last_RD1_exp;
reg [31:0] last_RD2_exp;
reg  last_REGWr_exp;
reg [31:0] last_ReadDataW_exp;
reg  last_condEx_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUCnt_prev = ALUCnt;
	ALUFlags_w_prev = ALUFlags_w;
	ALUOutW_prev = ALUOutW;
	CondE_prev = CondE;
	FlagWrite_prev = FlagWrite;
	FlagWriteD_prev = FlagWriteD;
	FlagWriteE_prev = FlagWriteE;
	Flags_prev = Flags;
	Inst_prev = Inst;
	PCSrcM_prev = PCSrcM;
	PC_out_prev = PC_out;
	RD1_prev = RD1;
	RD2_prev = RD2;
	REGWr_prev = REGWr;
	ReadDataW_prev = ReadDataW;
	condEx_prev = condEx;
end

// update expected /o prevs

always @(trigger)
begin
	ALUCnt_expected_prev = ALUCnt_expected;
	ALUFlags_w_expected_prev = ALUFlags_w_expected;
	ALUOutW_expected_prev = ALUOutW_expected;
	CondE_expected_prev = CondE_expected;
	FlagWrite_expected_prev = FlagWrite_expected;
	FlagWriteD_expected_prev = FlagWriteD_expected;
	FlagWriteE_expected_prev = FlagWriteE_expected;
	Flags_expected_prev = Flags_expected;
	Inst_expected_prev = Inst_expected;
	PCSrcM_expected_prev = PCSrcM_expected;
	PC_out_expected_prev = PC_out_expected;
	RD1_expected_prev = RD1_expected;
	RD2_expected_prev = RD2_expected;
	REGWr_expected_prev = REGWr_expected;
	ReadDataW_expected_prev = ReadDataW_expected;
	condEx_expected_prev = condEx_expected;
end


// expected Flags[ 3 ]
initial
begin
	Flags_expected[3] = 1'bX;
end 
// expected Flags[ 2 ]
initial
begin
	Flags_expected[2] = 1'bX;
end 
// expected Flags[ 1 ]
initial
begin
	Flags_expected[1] = 1'bX;
end 
// expected Flags[ 0 ]
initial
begin
	Flags_expected[0] = 1'bX;
end 
// expected ALUCnt[ 3 ]
initial
begin
	ALUCnt_expected[3] = 1'bX;
end 
// expected ALUCnt[ 2 ]
initial
begin
	ALUCnt_expected[2] = 1'bX;
end 
// expected ALUCnt[ 1 ]
initial
begin
	ALUCnt_expected[1] = 1'bX;
end 
// expected ALUCnt[ 0 ]
initial
begin
	ALUCnt_expected[0] = 1'bX;
end 
// expected ALUFlags_w[ 3 ]
initial
begin
	ALUFlags_w_expected[3] = 1'bX;
end 
// expected ALUFlags_w[ 2 ]
initial
begin
	ALUFlags_w_expected[2] = 1'bX;
end 
// expected ALUFlags_w[ 1 ]
initial
begin
	ALUFlags_w_expected[1] = 1'bX;
end 
// expected ALUFlags_w[ 0 ]
initial
begin
	ALUFlags_w_expected[0] = 1'bX;
end 
// expected ALUOutW[ 31 ]
initial
begin
	ALUOutW_expected[31] = 1'bX;
end 
// expected ALUOutW[ 30 ]
initial
begin
	ALUOutW_expected[30] = 1'bX;
end 
// expected ALUOutW[ 29 ]
initial
begin
	ALUOutW_expected[29] = 1'bX;
end 
// expected ALUOutW[ 28 ]
initial
begin
	ALUOutW_expected[28] = 1'bX;
end 
// expected ALUOutW[ 27 ]
initial
begin
	ALUOutW_expected[27] = 1'bX;
end 
// expected ALUOutW[ 26 ]
initial
begin
	ALUOutW_expected[26] = 1'bX;
end 
// expected ALUOutW[ 25 ]
initial
begin
	ALUOutW_expected[25] = 1'bX;
end 
// expected ALUOutW[ 24 ]
initial
begin
	ALUOutW_expected[24] = 1'bX;
end 
// expected ALUOutW[ 23 ]
initial
begin
	ALUOutW_expected[23] = 1'bX;
end 
// expected ALUOutW[ 22 ]
initial
begin
	ALUOutW_expected[22] = 1'bX;
end 
// expected ALUOutW[ 21 ]
initial
begin
	ALUOutW_expected[21] = 1'bX;
end 
// expected ALUOutW[ 20 ]
initial
begin
	ALUOutW_expected[20] = 1'bX;
end 
// expected ALUOutW[ 19 ]
initial
begin
	ALUOutW_expected[19] = 1'bX;
end 
// expected ALUOutW[ 18 ]
initial
begin
	ALUOutW_expected[18] = 1'bX;
end 
// expected ALUOutW[ 17 ]
initial
begin
	ALUOutW_expected[17] = 1'bX;
end 
// expected ALUOutW[ 16 ]
initial
begin
	ALUOutW_expected[16] = 1'bX;
end 
// expected ALUOutW[ 15 ]
initial
begin
	ALUOutW_expected[15] = 1'bX;
end 
// expected ALUOutW[ 14 ]
initial
begin
	ALUOutW_expected[14] = 1'bX;
end 
// expected ALUOutW[ 13 ]
initial
begin
	ALUOutW_expected[13] = 1'bX;
end 
// expected ALUOutW[ 12 ]
initial
begin
	ALUOutW_expected[12] = 1'bX;
end 
// expected ALUOutW[ 11 ]
initial
begin
	ALUOutW_expected[11] = 1'bX;
end 
// expected ALUOutW[ 10 ]
initial
begin
	ALUOutW_expected[10] = 1'bX;
end 
// expected ALUOutW[ 9 ]
initial
begin
	ALUOutW_expected[9] = 1'bX;
end 
// expected ALUOutW[ 8 ]
initial
begin
	ALUOutW_expected[8] = 1'bX;
end 
// expected ALUOutW[ 7 ]
initial
begin
	ALUOutW_expected[7] = 1'bX;
end 
// expected ALUOutW[ 6 ]
initial
begin
	ALUOutW_expected[6] = 1'bX;
end 
// expected ALUOutW[ 5 ]
initial
begin
	ALUOutW_expected[5] = 1'bX;
end 
// expected ALUOutW[ 4 ]
initial
begin
	ALUOutW_expected[4] = 1'bX;
end 
// expected ALUOutW[ 3 ]
initial
begin
	ALUOutW_expected[3] = 1'bX;
end 
// expected ALUOutW[ 2 ]
initial
begin
	ALUOutW_expected[2] = 1'bX;
end 
// expected ALUOutW[ 1 ]
initial
begin
	ALUOutW_expected[1] = 1'bX;
end 
// expected ALUOutW[ 0 ]
initial
begin
	ALUOutW_expected[0] = 1'bX;
end 
// expected CondE[ 3 ]
initial
begin
	CondE_expected[3] = 1'bX;
end 
// expected CondE[ 2 ]
initial
begin
	CondE_expected[2] = 1'bX;
end 
// expected CondE[ 1 ]
initial
begin
	CondE_expected[1] = 1'bX;
end 
// expected CondE[ 0 ]
initial
begin
	CondE_expected[0] = 1'bX;
end 
// expected FlagWrite[ 1 ]
initial
begin
	FlagWrite_expected[1] = 1'bX;
end 
// expected FlagWrite[ 0 ]
initial
begin
	FlagWrite_expected[0] = 1'bX;
end 
// expected FlagWriteD[ 1 ]
initial
begin
	FlagWriteD_expected[1] = 1'bX;
end 
// expected FlagWriteD[ 0 ]
initial
begin
	FlagWriteD_expected[0] = 1'bX;
end 
// expected FlagWriteE[ 1 ]
initial
begin
	FlagWriteE_expected[1] = 1'bX;
end 
// expected FlagWriteE[ 0 ]
initial
begin
	FlagWriteE_expected[0] = 1'bX;
end 
// expected Inst[ 31 ]
initial
begin
	Inst_expected[31] = 1'bX;
end 
// expected Inst[ 30 ]
initial
begin
	Inst_expected[30] = 1'bX;
end 
// expected Inst[ 29 ]
initial
begin
	Inst_expected[29] = 1'bX;
end 
// expected Inst[ 28 ]
initial
begin
	Inst_expected[28] = 1'bX;
end 
// expected Inst[ 27 ]
initial
begin
	Inst_expected[27] = 1'bX;
end 
// expected Inst[ 26 ]
initial
begin
	Inst_expected[26] = 1'bX;
end 
// expected Inst[ 25 ]
initial
begin
	Inst_expected[25] = 1'bX;
end 
// expected Inst[ 24 ]
initial
begin
	Inst_expected[24] = 1'bX;
end 
// expected Inst[ 23 ]
initial
begin
	Inst_expected[23] = 1'bX;
end 
// expected Inst[ 22 ]
initial
begin
	Inst_expected[22] = 1'bX;
end 
// expected Inst[ 21 ]
initial
begin
	Inst_expected[21] = 1'bX;
end 
// expected Inst[ 20 ]
initial
begin
	Inst_expected[20] = 1'bX;
end 
// expected Inst[ 19 ]
initial
begin
	Inst_expected[19] = 1'bX;
end 
// expected Inst[ 18 ]
initial
begin
	Inst_expected[18] = 1'bX;
end 
// expected Inst[ 17 ]
initial
begin
	Inst_expected[17] = 1'bX;
end 
// expected Inst[ 16 ]
initial
begin
	Inst_expected[16] = 1'bX;
end 
// expected Inst[ 15 ]
initial
begin
	Inst_expected[15] = 1'bX;
end 
// expected Inst[ 14 ]
initial
begin
	Inst_expected[14] = 1'bX;
end 
// expected Inst[ 13 ]
initial
begin
	Inst_expected[13] = 1'bX;
end 
// expected Inst[ 12 ]
initial
begin
	Inst_expected[12] = 1'bX;
end 
// expected Inst[ 11 ]
initial
begin
	Inst_expected[11] = 1'bX;
end 
// expected Inst[ 10 ]
initial
begin
	Inst_expected[10] = 1'bX;
end 
// expected Inst[ 9 ]
initial
begin
	Inst_expected[9] = 1'bX;
end 
// expected Inst[ 8 ]
initial
begin
	Inst_expected[8] = 1'bX;
end 
// expected Inst[ 7 ]
initial
begin
	Inst_expected[7] = 1'bX;
end 
// expected Inst[ 6 ]
initial
begin
	Inst_expected[6] = 1'bX;
end 
// expected Inst[ 5 ]
initial
begin
	Inst_expected[5] = 1'bX;
end 
// expected Inst[ 4 ]
initial
begin
	Inst_expected[4] = 1'bX;
end 
// expected Inst[ 3 ]
initial
begin
	Inst_expected[3] = 1'bX;
end 
// expected Inst[ 2 ]
initial
begin
	Inst_expected[2] = 1'bX;
end 
// expected Inst[ 1 ]
initial
begin
	Inst_expected[1] = 1'bX;
end 
// expected Inst[ 0 ]
initial
begin
	Inst_expected[0] = 1'bX;
end 

// expected PCSrcM
initial
begin
	PCSrcM_expected = 1'bX;
end 
// expected PC_out[ 31 ]
initial
begin
	PC_out_expected[31] = 1'bX;
end 
// expected PC_out[ 30 ]
initial
begin
	PC_out_expected[30] = 1'bX;
end 
// expected PC_out[ 29 ]
initial
begin
	PC_out_expected[29] = 1'bX;
end 
// expected PC_out[ 28 ]
initial
begin
	PC_out_expected[28] = 1'bX;
end 
// expected PC_out[ 27 ]
initial
begin
	PC_out_expected[27] = 1'bX;
end 
// expected PC_out[ 26 ]
initial
begin
	PC_out_expected[26] = 1'bX;
end 
// expected PC_out[ 25 ]
initial
begin
	PC_out_expected[25] = 1'bX;
end 
// expected PC_out[ 24 ]
initial
begin
	PC_out_expected[24] = 1'bX;
end 
// expected PC_out[ 23 ]
initial
begin
	PC_out_expected[23] = 1'bX;
end 
// expected PC_out[ 22 ]
initial
begin
	PC_out_expected[22] = 1'bX;
end 
// expected PC_out[ 21 ]
initial
begin
	PC_out_expected[21] = 1'bX;
end 
// expected PC_out[ 20 ]
initial
begin
	PC_out_expected[20] = 1'bX;
end 
// expected PC_out[ 19 ]
initial
begin
	PC_out_expected[19] = 1'bX;
end 
// expected PC_out[ 18 ]
initial
begin
	PC_out_expected[18] = 1'bX;
end 
// expected PC_out[ 17 ]
initial
begin
	PC_out_expected[17] = 1'bX;
end 
// expected PC_out[ 16 ]
initial
begin
	PC_out_expected[16] = 1'bX;
end 
// expected PC_out[ 15 ]
initial
begin
	PC_out_expected[15] = 1'bX;
end 
// expected PC_out[ 14 ]
initial
begin
	PC_out_expected[14] = 1'bX;
end 
// expected PC_out[ 13 ]
initial
begin
	PC_out_expected[13] = 1'bX;
end 
// expected PC_out[ 12 ]
initial
begin
	PC_out_expected[12] = 1'bX;
end 
// expected PC_out[ 11 ]
initial
begin
	PC_out_expected[11] = 1'bX;
end 
// expected PC_out[ 10 ]
initial
begin
	PC_out_expected[10] = 1'bX;
end 
// expected PC_out[ 9 ]
initial
begin
	PC_out_expected[9] = 1'bX;
end 
// expected PC_out[ 8 ]
initial
begin
	PC_out_expected[8] = 1'bX;
end 
// expected PC_out[ 7 ]
initial
begin
	PC_out_expected[7] = 1'bX;
end 
// expected PC_out[ 6 ]
initial
begin
	PC_out_expected[6] = 1'bX;
end 
// expected PC_out[ 5 ]
initial
begin
	PC_out_expected[5] = 1'bX;
end 
// expected PC_out[ 4 ]
initial
begin
	PC_out_expected[4] = 1'bX;
end 
// expected PC_out[ 3 ]
initial
begin
	PC_out_expected[3] = 1'bX;
end 
// expected PC_out[ 2 ]
initial
begin
	PC_out_expected[2] = 1'bX;
end 
// expected PC_out[ 1 ]
initial
begin
	PC_out_expected[1] = 1'bX;
end 
// expected PC_out[ 0 ]
initial
begin
	PC_out_expected[0] = 1'bX;
end 
// expected RD1[ 31 ]
initial
begin
	RD1_expected[31] = 1'bX;
end 
// expected RD1[ 30 ]
initial
begin
	RD1_expected[30] = 1'bX;
end 
// expected RD1[ 29 ]
initial
begin
	RD1_expected[29] = 1'bX;
end 
// expected RD1[ 28 ]
initial
begin
	RD1_expected[28] = 1'bX;
end 
// expected RD1[ 27 ]
initial
begin
	RD1_expected[27] = 1'bX;
end 
// expected RD1[ 26 ]
initial
begin
	RD1_expected[26] = 1'bX;
end 
// expected RD1[ 25 ]
initial
begin
	RD1_expected[25] = 1'bX;
end 
// expected RD1[ 24 ]
initial
begin
	RD1_expected[24] = 1'bX;
end 
// expected RD1[ 23 ]
initial
begin
	RD1_expected[23] = 1'bX;
end 
// expected RD1[ 22 ]
initial
begin
	RD1_expected[22] = 1'bX;
end 
// expected RD1[ 21 ]
initial
begin
	RD1_expected[21] = 1'bX;
end 
// expected RD1[ 20 ]
initial
begin
	RD1_expected[20] = 1'bX;
end 
// expected RD1[ 19 ]
initial
begin
	RD1_expected[19] = 1'bX;
end 
// expected RD1[ 18 ]
initial
begin
	RD1_expected[18] = 1'bX;
end 
// expected RD1[ 17 ]
initial
begin
	RD1_expected[17] = 1'bX;
end 
// expected RD1[ 16 ]
initial
begin
	RD1_expected[16] = 1'bX;
end 
// expected RD1[ 15 ]
initial
begin
	RD1_expected[15] = 1'bX;
end 
// expected RD1[ 14 ]
initial
begin
	RD1_expected[14] = 1'bX;
end 
// expected RD1[ 13 ]
initial
begin
	RD1_expected[13] = 1'bX;
end 
// expected RD1[ 12 ]
initial
begin
	RD1_expected[12] = 1'bX;
end 
// expected RD1[ 11 ]
initial
begin
	RD1_expected[11] = 1'bX;
end 
// expected RD1[ 10 ]
initial
begin
	RD1_expected[10] = 1'bX;
end 
// expected RD1[ 9 ]
initial
begin
	RD1_expected[9] = 1'bX;
end 
// expected RD1[ 8 ]
initial
begin
	RD1_expected[8] = 1'bX;
end 
// expected RD1[ 7 ]
initial
begin
	RD1_expected[7] = 1'bX;
end 
// expected RD1[ 6 ]
initial
begin
	RD1_expected[6] = 1'bX;
end 
// expected RD1[ 5 ]
initial
begin
	RD1_expected[5] = 1'bX;
end 
// expected RD1[ 4 ]
initial
begin
	RD1_expected[4] = 1'bX;
end 
// expected RD1[ 3 ]
initial
begin
	RD1_expected[3] = 1'bX;
end 
// expected RD1[ 2 ]
initial
begin
	RD1_expected[2] = 1'bX;
end 
// expected RD1[ 1 ]
initial
begin
	RD1_expected[1] = 1'bX;
end 
// expected RD1[ 0 ]
initial
begin
	RD1_expected[0] = 1'bX;
end 
// expected RD2[ 31 ]
initial
begin
	RD2_expected[31] = 1'bX;
end 
// expected RD2[ 30 ]
initial
begin
	RD2_expected[30] = 1'bX;
end 
// expected RD2[ 29 ]
initial
begin
	RD2_expected[29] = 1'bX;
end 
// expected RD2[ 28 ]
initial
begin
	RD2_expected[28] = 1'bX;
end 
// expected RD2[ 27 ]
initial
begin
	RD2_expected[27] = 1'bX;
end 
// expected RD2[ 26 ]
initial
begin
	RD2_expected[26] = 1'bX;
end 
// expected RD2[ 25 ]
initial
begin
	RD2_expected[25] = 1'bX;
end 
// expected RD2[ 24 ]
initial
begin
	RD2_expected[24] = 1'bX;
end 
// expected RD2[ 23 ]
initial
begin
	RD2_expected[23] = 1'bX;
end 
// expected RD2[ 22 ]
initial
begin
	RD2_expected[22] = 1'bX;
end 
// expected RD2[ 21 ]
initial
begin
	RD2_expected[21] = 1'bX;
end 
// expected RD2[ 20 ]
initial
begin
	RD2_expected[20] = 1'bX;
end 
// expected RD2[ 19 ]
initial
begin
	RD2_expected[19] = 1'bX;
end 
// expected RD2[ 18 ]
initial
begin
	RD2_expected[18] = 1'bX;
end 
// expected RD2[ 17 ]
initial
begin
	RD2_expected[17] = 1'bX;
end 
// expected RD2[ 16 ]
initial
begin
	RD2_expected[16] = 1'bX;
end 
// expected RD2[ 15 ]
initial
begin
	RD2_expected[15] = 1'bX;
end 
// expected RD2[ 14 ]
initial
begin
	RD2_expected[14] = 1'bX;
end 
// expected RD2[ 13 ]
initial
begin
	RD2_expected[13] = 1'bX;
end 
// expected RD2[ 12 ]
initial
begin
	RD2_expected[12] = 1'bX;
end 
// expected RD2[ 11 ]
initial
begin
	RD2_expected[11] = 1'bX;
end 
// expected RD2[ 10 ]
initial
begin
	RD2_expected[10] = 1'bX;
end 
// expected RD2[ 9 ]
initial
begin
	RD2_expected[9] = 1'bX;
end 
// expected RD2[ 8 ]
initial
begin
	RD2_expected[8] = 1'bX;
end 
// expected RD2[ 7 ]
initial
begin
	RD2_expected[7] = 1'bX;
end 
// expected RD2[ 6 ]
initial
begin
	RD2_expected[6] = 1'bX;
end 
// expected RD2[ 5 ]
initial
begin
	RD2_expected[5] = 1'bX;
end 
// expected RD2[ 4 ]
initial
begin
	RD2_expected[4] = 1'bX;
end 
// expected RD2[ 3 ]
initial
begin
	RD2_expected[3] = 1'bX;
end 
// expected RD2[ 2 ]
initial
begin
	RD2_expected[2] = 1'bX;
end 
// expected RD2[ 1 ]
initial
begin
	RD2_expected[1] = 1'bX;
end 
// expected RD2[ 0 ]
initial
begin
	RD2_expected[0] = 1'bX;
end 

// expected REGWr
initial
begin
	REGWr_expected = 1'bX;
end 
// expected ReadDataW[ 31 ]
initial
begin
	ReadDataW_expected[31] = 1'bX;
end 
// expected ReadDataW[ 30 ]
initial
begin
	ReadDataW_expected[30] = 1'bX;
end 
// expected ReadDataW[ 29 ]
initial
begin
	ReadDataW_expected[29] = 1'bX;
end 
// expected ReadDataW[ 28 ]
initial
begin
	ReadDataW_expected[28] = 1'bX;
end 
// expected ReadDataW[ 27 ]
initial
begin
	ReadDataW_expected[27] = 1'bX;
end 
// expected ReadDataW[ 26 ]
initial
begin
	ReadDataW_expected[26] = 1'bX;
end 
// expected ReadDataW[ 25 ]
initial
begin
	ReadDataW_expected[25] = 1'bX;
end 
// expected ReadDataW[ 24 ]
initial
begin
	ReadDataW_expected[24] = 1'bX;
end 
// expected ReadDataW[ 23 ]
initial
begin
	ReadDataW_expected[23] = 1'bX;
end 
// expected ReadDataW[ 22 ]
initial
begin
	ReadDataW_expected[22] = 1'bX;
end 
// expected ReadDataW[ 21 ]
initial
begin
	ReadDataW_expected[21] = 1'bX;
end 
// expected ReadDataW[ 20 ]
initial
begin
	ReadDataW_expected[20] = 1'bX;
end 
// expected ReadDataW[ 19 ]
initial
begin
	ReadDataW_expected[19] = 1'bX;
end 
// expected ReadDataW[ 18 ]
initial
begin
	ReadDataW_expected[18] = 1'bX;
end 
// expected ReadDataW[ 17 ]
initial
begin
	ReadDataW_expected[17] = 1'bX;
end 
// expected ReadDataW[ 16 ]
initial
begin
	ReadDataW_expected[16] = 1'bX;
end 
// expected ReadDataW[ 15 ]
initial
begin
	ReadDataW_expected[15] = 1'bX;
end 
// expected ReadDataW[ 14 ]
initial
begin
	ReadDataW_expected[14] = 1'bX;
end 
// expected ReadDataW[ 13 ]
initial
begin
	ReadDataW_expected[13] = 1'bX;
end 
// expected ReadDataW[ 12 ]
initial
begin
	ReadDataW_expected[12] = 1'bX;
end 
// expected ReadDataW[ 11 ]
initial
begin
	ReadDataW_expected[11] = 1'bX;
end 
// expected ReadDataW[ 10 ]
initial
begin
	ReadDataW_expected[10] = 1'bX;
end 
// expected ReadDataW[ 9 ]
initial
begin
	ReadDataW_expected[9] = 1'bX;
end 
// expected ReadDataW[ 8 ]
initial
begin
	ReadDataW_expected[8] = 1'bX;
end 
// expected ReadDataW[ 7 ]
initial
begin
	ReadDataW_expected[7] = 1'bX;
end 
// expected ReadDataW[ 6 ]
initial
begin
	ReadDataW_expected[6] = 1'bX;
end 
// expected ReadDataW[ 5 ]
initial
begin
	ReadDataW_expected[5] = 1'bX;
end 
// expected ReadDataW[ 4 ]
initial
begin
	ReadDataW_expected[4] = 1'bX;
end 
// expected ReadDataW[ 3 ]
initial
begin
	ReadDataW_expected[3] = 1'bX;
end 
// expected ReadDataW[ 2 ]
initial
begin
	ReadDataW_expected[2] = 1'bX;
end 
// expected ReadDataW[ 1 ]
initial
begin
	ReadDataW_expected[1] = 1'bX;
end 
// expected ReadDataW[ 0 ]
initial
begin
	ReadDataW_expected[0] = 1'bX;
end 

// expected condEx
initial
begin
	condEx_expected = 1'bX;
end 
// generate trigger
always @(ALUCnt_expected or ALUCnt or ALUFlags_w_expected or ALUFlags_w or ALUOutW_expected or ALUOutW or CondE_expected or CondE or FlagWrite_expected or FlagWrite or FlagWriteD_expected or FlagWriteD or FlagWriteE_expected or FlagWriteE or Flags_expected or Flags or Inst_expected or Inst or PCSrcM_expected or PCSrcM or PC_out_expected or PC_out or RD1_expected or RD1 or RD2_expected or RD2 or REGWr_expected or REGWr or ReadDataW_expected or ReadDataW or condEx_expected or condEx)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUCnt = %b | expected ALUFlags_w = %b | expected ALUOutW = %b | expected CondE = %b | expected FlagWrite = %b | expected FlagWriteD = %b | expected FlagWriteE = %b | expected Flags = %b | expected Inst = %b | expected PCSrcM = %b | expected PC_out = %b | expected RD1 = %b | expected RD2 = %b | expected REGWr = %b | expected ReadDataW = %b | expected condEx = %b | ",ALUCnt_expected_prev,ALUFlags_w_expected_prev,ALUOutW_expected_prev,CondE_expected_prev,FlagWrite_expected_prev,FlagWriteD_expected_prev,FlagWriteE_expected_prev,Flags_expected_prev,Inst_expected_prev,PCSrcM_expected_prev,PC_out_expected_prev,RD1_expected_prev,RD2_expected_prev,REGWr_expected_prev,ReadDataW_expected_prev,condEx_expected_prev);
	$display("| real ALUCnt = %b | real ALUFlags_w = %b | real ALUOutW = %b | real CondE = %b | real FlagWrite = %b | real FlagWriteD = %b | real FlagWriteE = %b | real Flags = %b | real Inst = %b | real PCSrcM = %b | real PC_out = %b | real RD1 = %b | real RD2 = %b | real REGWr = %b | real ReadDataW = %b | real condEx = %b | ",ALUCnt_prev,ALUFlags_w_prev,ALUOutW_prev,CondE_prev,FlagWrite_prev,FlagWriteD_prev,FlagWriteE_prev,Flags_prev,Inst_prev,PCSrcM_prev,PC_out_prev,RD1_prev,RD2_prev,REGWr_prev,ReadDataW_prev,condEx_prev);
`endif
	if (
		( ALUCnt_expected_prev[0] !== 1'bx ) && ( ALUCnt_prev[0] !== ALUCnt_expected_prev[0] )
		&& ((ALUCnt_expected_prev[0] !== last_ALUCnt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCnt_expected_prev);
		$display ("     Real value = %b", ALUCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUCnt_exp[0] = ALUCnt_expected_prev[0];
	end
	if (
		( ALUCnt_expected_prev[1] !== 1'bx ) && ( ALUCnt_prev[1] !== ALUCnt_expected_prev[1] )
		&& ((ALUCnt_expected_prev[1] !== last_ALUCnt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCnt_expected_prev);
		$display ("     Real value = %b", ALUCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUCnt_exp[1] = ALUCnt_expected_prev[1];
	end
	if (
		( ALUCnt_expected_prev[2] !== 1'bx ) && ( ALUCnt_prev[2] !== ALUCnt_expected_prev[2] )
		&& ((ALUCnt_expected_prev[2] !== last_ALUCnt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCnt_expected_prev);
		$display ("     Real value = %b", ALUCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUCnt_exp[2] = ALUCnt_expected_prev[2];
	end
	if (
		( ALUCnt_expected_prev[3] !== 1'bx ) && ( ALUCnt_prev[3] !== ALUCnt_expected_prev[3] )
		&& ((ALUCnt_expected_prev[3] !== last_ALUCnt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCnt_expected_prev);
		$display ("     Real value = %b", ALUCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUCnt_exp[3] = ALUCnt_expected_prev[3];
	end
	if (
		( ALUFlags_w_expected_prev[0] !== 1'bx ) && ( ALUFlags_w_prev[0] !== ALUFlags_w_expected_prev[0] )
		&& ((ALUFlags_w_expected_prev[0] !== last_ALUFlags_w_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFlags_w[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFlags_w_expected_prev);
		$display ("     Real value = %b", ALUFlags_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUFlags_w_exp[0] = ALUFlags_w_expected_prev[0];
	end
	if (
		( ALUFlags_w_expected_prev[1] !== 1'bx ) && ( ALUFlags_w_prev[1] !== ALUFlags_w_expected_prev[1] )
		&& ((ALUFlags_w_expected_prev[1] !== last_ALUFlags_w_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFlags_w[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFlags_w_expected_prev);
		$display ("     Real value = %b", ALUFlags_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUFlags_w_exp[1] = ALUFlags_w_expected_prev[1];
	end
	if (
		( ALUFlags_w_expected_prev[2] !== 1'bx ) && ( ALUFlags_w_prev[2] !== ALUFlags_w_expected_prev[2] )
		&& ((ALUFlags_w_expected_prev[2] !== last_ALUFlags_w_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFlags_w[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFlags_w_expected_prev);
		$display ("     Real value = %b", ALUFlags_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUFlags_w_exp[2] = ALUFlags_w_expected_prev[2];
	end
	if (
		( ALUFlags_w_expected_prev[3] !== 1'bx ) && ( ALUFlags_w_prev[3] !== ALUFlags_w_expected_prev[3] )
		&& ((ALUFlags_w_expected_prev[3] !== last_ALUFlags_w_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFlags_w[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFlags_w_expected_prev);
		$display ("     Real value = %b", ALUFlags_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUFlags_w_exp[3] = ALUFlags_w_expected_prev[3];
	end
	if (
		( ALUOutW_expected_prev[0] !== 1'bx ) && ( ALUOutW_prev[0] !== ALUOutW_expected_prev[0] )
		&& ((ALUOutW_expected_prev[0] !== last_ALUOutW_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[0] = ALUOutW_expected_prev[0];
	end
	if (
		( ALUOutW_expected_prev[1] !== 1'bx ) && ( ALUOutW_prev[1] !== ALUOutW_expected_prev[1] )
		&& ((ALUOutW_expected_prev[1] !== last_ALUOutW_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[1] = ALUOutW_expected_prev[1];
	end
	if (
		( ALUOutW_expected_prev[2] !== 1'bx ) && ( ALUOutW_prev[2] !== ALUOutW_expected_prev[2] )
		&& ((ALUOutW_expected_prev[2] !== last_ALUOutW_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[2] = ALUOutW_expected_prev[2];
	end
	if (
		( ALUOutW_expected_prev[3] !== 1'bx ) && ( ALUOutW_prev[3] !== ALUOutW_expected_prev[3] )
		&& ((ALUOutW_expected_prev[3] !== last_ALUOutW_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[3] = ALUOutW_expected_prev[3];
	end
	if (
		( ALUOutW_expected_prev[4] !== 1'bx ) && ( ALUOutW_prev[4] !== ALUOutW_expected_prev[4] )
		&& ((ALUOutW_expected_prev[4] !== last_ALUOutW_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[4] = ALUOutW_expected_prev[4];
	end
	if (
		( ALUOutW_expected_prev[5] !== 1'bx ) && ( ALUOutW_prev[5] !== ALUOutW_expected_prev[5] )
		&& ((ALUOutW_expected_prev[5] !== last_ALUOutW_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[5] = ALUOutW_expected_prev[5];
	end
	if (
		( ALUOutW_expected_prev[6] !== 1'bx ) && ( ALUOutW_prev[6] !== ALUOutW_expected_prev[6] )
		&& ((ALUOutW_expected_prev[6] !== last_ALUOutW_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[6] = ALUOutW_expected_prev[6];
	end
	if (
		( ALUOutW_expected_prev[7] !== 1'bx ) && ( ALUOutW_prev[7] !== ALUOutW_expected_prev[7] )
		&& ((ALUOutW_expected_prev[7] !== last_ALUOutW_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[7] = ALUOutW_expected_prev[7];
	end
	if (
		( ALUOutW_expected_prev[8] !== 1'bx ) && ( ALUOutW_prev[8] !== ALUOutW_expected_prev[8] )
		&& ((ALUOutW_expected_prev[8] !== last_ALUOutW_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[8] = ALUOutW_expected_prev[8];
	end
	if (
		( ALUOutW_expected_prev[9] !== 1'bx ) && ( ALUOutW_prev[9] !== ALUOutW_expected_prev[9] )
		&& ((ALUOutW_expected_prev[9] !== last_ALUOutW_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[9] = ALUOutW_expected_prev[9];
	end
	if (
		( ALUOutW_expected_prev[10] !== 1'bx ) && ( ALUOutW_prev[10] !== ALUOutW_expected_prev[10] )
		&& ((ALUOutW_expected_prev[10] !== last_ALUOutW_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[10] = ALUOutW_expected_prev[10];
	end
	if (
		( ALUOutW_expected_prev[11] !== 1'bx ) && ( ALUOutW_prev[11] !== ALUOutW_expected_prev[11] )
		&& ((ALUOutW_expected_prev[11] !== last_ALUOutW_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[11] = ALUOutW_expected_prev[11];
	end
	if (
		( ALUOutW_expected_prev[12] !== 1'bx ) && ( ALUOutW_prev[12] !== ALUOutW_expected_prev[12] )
		&& ((ALUOutW_expected_prev[12] !== last_ALUOutW_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[12] = ALUOutW_expected_prev[12];
	end
	if (
		( ALUOutW_expected_prev[13] !== 1'bx ) && ( ALUOutW_prev[13] !== ALUOutW_expected_prev[13] )
		&& ((ALUOutW_expected_prev[13] !== last_ALUOutW_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[13] = ALUOutW_expected_prev[13];
	end
	if (
		( ALUOutW_expected_prev[14] !== 1'bx ) && ( ALUOutW_prev[14] !== ALUOutW_expected_prev[14] )
		&& ((ALUOutW_expected_prev[14] !== last_ALUOutW_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[14] = ALUOutW_expected_prev[14];
	end
	if (
		( ALUOutW_expected_prev[15] !== 1'bx ) && ( ALUOutW_prev[15] !== ALUOutW_expected_prev[15] )
		&& ((ALUOutW_expected_prev[15] !== last_ALUOutW_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[15] = ALUOutW_expected_prev[15];
	end
	if (
		( ALUOutW_expected_prev[16] !== 1'bx ) && ( ALUOutW_prev[16] !== ALUOutW_expected_prev[16] )
		&& ((ALUOutW_expected_prev[16] !== last_ALUOutW_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[16] = ALUOutW_expected_prev[16];
	end
	if (
		( ALUOutW_expected_prev[17] !== 1'bx ) && ( ALUOutW_prev[17] !== ALUOutW_expected_prev[17] )
		&& ((ALUOutW_expected_prev[17] !== last_ALUOutW_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[17] = ALUOutW_expected_prev[17];
	end
	if (
		( ALUOutW_expected_prev[18] !== 1'bx ) && ( ALUOutW_prev[18] !== ALUOutW_expected_prev[18] )
		&& ((ALUOutW_expected_prev[18] !== last_ALUOutW_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[18] = ALUOutW_expected_prev[18];
	end
	if (
		( ALUOutW_expected_prev[19] !== 1'bx ) && ( ALUOutW_prev[19] !== ALUOutW_expected_prev[19] )
		&& ((ALUOutW_expected_prev[19] !== last_ALUOutW_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[19] = ALUOutW_expected_prev[19];
	end
	if (
		( ALUOutW_expected_prev[20] !== 1'bx ) && ( ALUOutW_prev[20] !== ALUOutW_expected_prev[20] )
		&& ((ALUOutW_expected_prev[20] !== last_ALUOutW_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[20] = ALUOutW_expected_prev[20];
	end
	if (
		( ALUOutW_expected_prev[21] !== 1'bx ) && ( ALUOutW_prev[21] !== ALUOutW_expected_prev[21] )
		&& ((ALUOutW_expected_prev[21] !== last_ALUOutW_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[21] = ALUOutW_expected_prev[21];
	end
	if (
		( ALUOutW_expected_prev[22] !== 1'bx ) && ( ALUOutW_prev[22] !== ALUOutW_expected_prev[22] )
		&& ((ALUOutW_expected_prev[22] !== last_ALUOutW_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[22] = ALUOutW_expected_prev[22];
	end
	if (
		( ALUOutW_expected_prev[23] !== 1'bx ) && ( ALUOutW_prev[23] !== ALUOutW_expected_prev[23] )
		&& ((ALUOutW_expected_prev[23] !== last_ALUOutW_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[23] = ALUOutW_expected_prev[23];
	end
	if (
		( ALUOutW_expected_prev[24] !== 1'bx ) && ( ALUOutW_prev[24] !== ALUOutW_expected_prev[24] )
		&& ((ALUOutW_expected_prev[24] !== last_ALUOutW_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[24] = ALUOutW_expected_prev[24];
	end
	if (
		( ALUOutW_expected_prev[25] !== 1'bx ) && ( ALUOutW_prev[25] !== ALUOutW_expected_prev[25] )
		&& ((ALUOutW_expected_prev[25] !== last_ALUOutW_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[25] = ALUOutW_expected_prev[25];
	end
	if (
		( ALUOutW_expected_prev[26] !== 1'bx ) && ( ALUOutW_prev[26] !== ALUOutW_expected_prev[26] )
		&& ((ALUOutW_expected_prev[26] !== last_ALUOutW_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[26] = ALUOutW_expected_prev[26];
	end
	if (
		( ALUOutW_expected_prev[27] !== 1'bx ) && ( ALUOutW_prev[27] !== ALUOutW_expected_prev[27] )
		&& ((ALUOutW_expected_prev[27] !== last_ALUOutW_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[27] = ALUOutW_expected_prev[27];
	end
	if (
		( ALUOutW_expected_prev[28] !== 1'bx ) && ( ALUOutW_prev[28] !== ALUOutW_expected_prev[28] )
		&& ((ALUOutW_expected_prev[28] !== last_ALUOutW_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[28] = ALUOutW_expected_prev[28];
	end
	if (
		( ALUOutW_expected_prev[29] !== 1'bx ) && ( ALUOutW_prev[29] !== ALUOutW_expected_prev[29] )
		&& ((ALUOutW_expected_prev[29] !== last_ALUOutW_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[29] = ALUOutW_expected_prev[29];
	end
	if (
		( ALUOutW_expected_prev[30] !== 1'bx ) && ( ALUOutW_prev[30] !== ALUOutW_expected_prev[30] )
		&& ((ALUOutW_expected_prev[30] !== last_ALUOutW_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[30] = ALUOutW_expected_prev[30];
	end
	if (
		( ALUOutW_expected_prev[31] !== 1'bx ) && ( ALUOutW_prev[31] !== ALUOutW_expected_prev[31] )
		&& ((ALUOutW_expected_prev[31] !== last_ALUOutW_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutW[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutW_expected_prev);
		$display ("     Real value = %b", ALUOutW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUOutW_exp[31] = ALUOutW_expected_prev[31];
	end
	if (
		( CondE_expected_prev[0] !== 1'bx ) && ( CondE_prev[0] !== CondE_expected_prev[0] )
		&& ((CondE_expected_prev[0] !== last_CondE_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CondE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CondE_expected_prev);
		$display ("     Real value = %b", CondE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CondE_exp[0] = CondE_expected_prev[0];
	end
	if (
		( CondE_expected_prev[1] !== 1'bx ) && ( CondE_prev[1] !== CondE_expected_prev[1] )
		&& ((CondE_expected_prev[1] !== last_CondE_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CondE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CondE_expected_prev);
		$display ("     Real value = %b", CondE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CondE_exp[1] = CondE_expected_prev[1];
	end
	if (
		( CondE_expected_prev[2] !== 1'bx ) && ( CondE_prev[2] !== CondE_expected_prev[2] )
		&& ((CondE_expected_prev[2] !== last_CondE_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CondE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CondE_expected_prev);
		$display ("     Real value = %b", CondE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CondE_exp[2] = CondE_expected_prev[2];
	end
	if (
		( CondE_expected_prev[3] !== 1'bx ) && ( CondE_prev[3] !== CondE_expected_prev[3] )
		&& ((CondE_expected_prev[3] !== last_CondE_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CondE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CondE_expected_prev);
		$display ("     Real value = %b", CondE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CondE_exp[3] = CondE_expected_prev[3];
	end
	if (
		( FlagWrite_expected_prev[0] !== 1'bx ) && ( FlagWrite_prev[0] !== FlagWrite_expected_prev[0] )
		&& ((FlagWrite_expected_prev[0] !== last_FlagWrite_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FlagWrite[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FlagWrite_expected_prev);
		$display ("     Real value = %b", FlagWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_FlagWrite_exp[0] = FlagWrite_expected_prev[0];
	end
	if (
		( FlagWrite_expected_prev[1] !== 1'bx ) && ( FlagWrite_prev[1] !== FlagWrite_expected_prev[1] )
		&& ((FlagWrite_expected_prev[1] !== last_FlagWrite_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FlagWrite[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FlagWrite_expected_prev);
		$display ("     Real value = %b", FlagWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_FlagWrite_exp[1] = FlagWrite_expected_prev[1];
	end
	if (
		( FlagWriteD_expected_prev[0] !== 1'bx ) && ( FlagWriteD_prev[0] !== FlagWriteD_expected_prev[0] )
		&& ((FlagWriteD_expected_prev[0] !== last_FlagWriteD_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FlagWriteD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FlagWriteD_expected_prev);
		$display ("     Real value = %b", FlagWriteD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_FlagWriteD_exp[0] = FlagWriteD_expected_prev[0];
	end
	if (
		( FlagWriteD_expected_prev[1] !== 1'bx ) && ( FlagWriteD_prev[1] !== FlagWriteD_expected_prev[1] )
		&& ((FlagWriteD_expected_prev[1] !== last_FlagWriteD_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FlagWriteD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FlagWriteD_expected_prev);
		$display ("     Real value = %b", FlagWriteD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_FlagWriteD_exp[1] = FlagWriteD_expected_prev[1];
	end
	if (
		( FlagWriteE_expected_prev[0] !== 1'bx ) && ( FlagWriteE_prev[0] !== FlagWriteE_expected_prev[0] )
		&& ((FlagWriteE_expected_prev[0] !== last_FlagWriteE_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FlagWriteE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FlagWriteE_expected_prev);
		$display ("     Real value = %b", FlagWriteE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_FlagWriteE_exp[0] = FlagWriteE_expected_prev[0];
	end
	if (
		( FlagWriteE_expected_prev[1] !== 1'bx ) && ( FlagWriteE_prev[1] !== FlagWriteE_expected_prev[1] )
		&& ((FlagWriteE_expected_prev[1] !== last_FlagWriteE_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FlagWriteE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FlagWriteE_expected_prev);
		$display ("     Real value = %b", FlagWriteE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_FlagWriteE_exp[1] = FlagWriteE_expected_prev[1];
	end
	if (
		( Flags_expected_prev[0] !== 1'bx ) && ( Flags_prev[0] !== Flags_expected_prev[0] )
		&& ((Flags_expected_prev[0] !== last_Flags_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_expected_prev);
		$display ("     Real value = %b", Flags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Flags_exp[0] = Flags_expected_prev[0];
	end
	if (
		( Flags_expected_prev[1] !== 1'bx ) && ( Flags_prev[1] !== Flags_expected_prev[1] )
		&& ((Flags_expected_prev[1] !== last_Flags_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_expected_prev);
		$display ("     Real value = %b", Flags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Flags_exp[1] = Flags_expected_prev[1];
	end
	if (
		( Flags_expected_prev[2] !== 1'bx ) && ( Flags_prev[2] !== Flags_expected_prev[2] )
		&& ((Flags_expected_prev[2] !== last_Flags_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_expected_prev);
		$display ("     Real value = %b", Flags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Flags_exp[2] = Flags_expected_prev[2];
	end
	if (
		( Flags_expected_prev[3] !== 1'bx ) && ( Flags_prev[3] !== Flags_expected_prev[3] )
		&& ((Flags_expected_prev[3] !== last_Flags_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_expected_prev);
		$display ("     Real value = %b", Flags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Flags_exp[3] = Flags_expected_prev[3];
	end
	if (
		( Inst_expected_prev[0] !== 1'bx ) && ( Inst_prev[0] !== Inst_expected_prev[0] )
		&& ((Inst_expected_prev[0] !== last_Inst_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[0] = Inst_expected_prev[0];
	end
	if (
		( Inst_expected_prev[1] !== 1'bx ) && ( Inst_prev[1] !== Inst_expected_prev[1] )
		&& ((Inst_expected_prev[1] !== last_Inst_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[1] = Inst_expected_prev[1];
	end
	if (
		( Inst_expected_prev[2] !== 1'bx ) && ( Inst_prev[2] !== Inst_expected_prev[2] )
		&& ((Inst_expected_prev[2] !== last_Inst_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[2] = Inst_expected_prev[2];
	end
	if (
		( Inst_expected_prev[3] !== 1'bx ) && ( Inst_prev[3] !== Inst_expected_prev[3] )
		&& ((Inst_expected_prev[3] !== last_Inst_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[3] = Inst_expected_prev[3];
	end
	if (
		( Inst_expected_prev[4] !== 1'bx ) && ( Inst_prev[4] !== Inst_expected_prev[4] )
		&& ((Inst_expected_prev[4] !== last_Inst_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[4] = Inst_expected_prev[4];
	end
	if (
		( Inst_expected_prev[5] !== 1'bx ) && ( Inst_prev[5] !== Inst_expected_prev[5] )
		&& ((Inst_expected_prev[5] !== last_Inst_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[5] = Inst_expected_prev[5];
	end
	if (
		( Inst_expected_prev[6] !== 1'bx ) && ( Inst_prev[6] !== Inst_expected_prev[6] )
		&& ((Inst_expected_prev[6] !== last_Inst_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[6] = Inst_expected_prev[6];
	end
	if (
		( Inst_expected_prev[7] !== 1'bx ) && ( Inst_prev[7] !== Inst_expected_prev[7] )
		&& ((Inst_expected_prev[7] !== last_Inst_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[7] = Inst_expected_prev[7];
	end
	if (
		( Inst_expected_prev[8] !== 1'bx ) && ( Inst_prev[8] !== Inst_expected_prev[8] )
		&& ((Inst_expected_prev[8] !== last_Inst_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[8] = Inst_expected_prev[8];
	end
	if (
		( Inst_expected_prev[9] !== 1'bx ) && ( Inst_prev[9] !== Inst_expected_prev[9] )
		&& ((Inst_expected_prev[9] !== last_Inst_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[9] = Inst_expected_prev[9];
	end
	if (
		( Inst_expected_prev[10] !== 1'bx ) && ( Inst_prev[10] !== Inst_expected_prev[10] )
		&& ((Inst_expected_prev[10] !== last_Inst_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[10] = Inst_expected_prev[10];
	end
	if (
		( Inst_expected_prev[11] !== 1'bx ) && ( Inst_prev[11] !== Inst_expected_prev[11] )
		&& ((Inst_expected_prev[11] !== last_Inst_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[11] = Inst_expected_prev[11];
	end
	if (
		( Inst_expected_prev[12] !== 1'bx ) && ( Inst_prev[12] !== Inst_expected_prev[12] )
		&& ((Inst_expected_prev[12] !== last_Inst_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[12] = Inst_expected_prev[12];
	end
	if (
		( Inst_expected_prev[13] !== 1'bx ) && ( Inst_prev[13] !== Inst_expected_prev[13] )
		&& ((Inst_expected_prev[13] !== last_Inst_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[13] = Inst_expected_prev[13];
	end
	if (
		( Inst_expected_prev[14] !== 1'bx ) && ( Inst_prev[14] !== Inst_expected_prev[14] )
		&& ((Inst_expected_prev[14] !== last_Inst_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[14] = Inst_expected_prev[14];
	end
	if (
		( Inst_expected_prev[15] !== 1'bx ) && ( Inst_prev[15] !== Inst_expected_prev[15] )
		&& ((Inst_expected_prev[15] !== last_Inst_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[15] = Inst_expected_prev[15];
	end
	if (
		( Inst_expected_prev[16] !== 1'bx ) && ( Inst_prev[16] !== Inst_expected_prev[16] )
		&& ((Inst_expected_prev[16] !== last_Inst_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[16] = Inst_expected_prev[16];
	end
	if (
		( Inst_expected_prev[17] !== 1'bx ) && ( Inst_prev[17] !== Inst_expected_prev[17] )
		&& ((Inst_expected_prev[17] !== last_Inst_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[17] = Inst_expected_prev[17];
	end
	if (
		( Inst_expected_prev[18] !== 1'bx ) && ( Inst_prev[18] !== Inst_expected_prev[18] )
		&& ((Inst_expected_prev[18] !== last_Inst_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[18] = Inst_expected_prev[18];
	end
	if (
		( Inst_expected_prev[19] !== 1'bx ) && ( Inst_prev[19] !== Inst_expected_prev[19] )
		&& ((Inst_expected_prev[19] !== last_Inst_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[19] = Inst_expected_prev[19];
	end
	if (
		( Inst_expected_prev[20] !== 1'bx ) && ( Inst_prev[20] !== Inst_expected_prev[20] )
		&& ((Inst_expected_prev[20] !== last_Inst_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[20] = Inst_expected_prev[20];
	end
	if (
		( Inst_expected_prev[21] !== 1'bx ) && ( Inst_prev[21] !== Inst_expected_prev[21] )
		&& ((Inst_expected_prev[21] !== last_Inst_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[21] = Inst_expected_prev[21];
	end
	if (
		( Inst_expected_prev[22] !== 1'bx ) && ( Inst_prev[22] !== Inst_expected_prev[22] )
		&& ((Inst_expected_prev[22] !== last_Inst_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[22] = Inst_expected_prev[22];
	end
	if (
		( Inst_expected_prev[23] !== 1'bx ) && ( Inst_prev[23] !== Inst_expected_prev[23] )
		&& ((Inst_expected_prev[23] !== last_Inst_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[23] = Inst_expected_prev[23];
	end
	if (
		( Inst_expected_prev[24] !== 1'bx ) && ( Inst_prev[24] !== Inst_expected_prev[24] )
		&& ((Inst_expected_prev[24] !== last_Inst_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[24] = Inst_expected_prev[24];
	end
	if (
		( Inst_expected_prev[25] !== 1'bx ) && ( Inst_prev[25] !== Inst_expected_prev[25] )
		&& ((Inst_expected_prev[25] !== last_Inst_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[25] = Inst_expected_prev[25];
	end
	if (
		( Inst_expected_prev[26] !== 1'bx ) && ( Inst_prev[26] !== Inst_expected_prev[26] )
		&& ((Inst_expected_prev[26] !== last_Inst_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[26] = Inst_expected_prev[26];
	end
	if (
		( Inst_expected_prev[27] !== 1'bx ) && ( Inst_prev[27] !== Inst_expected_prev[27] )
		&& ((Inst_expected_prev[27] !== last_Inst_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[27] = Inst_expected_prev[27];
	end
	if (
		( Inst_expected_prev[28] !== 1'bx ) && ( Inst_prev[28] !== Inst_expected_prev[28] )
		&& ((Inst_expected_prev[28] !== last_Inst_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[28] = Inst_expected_prev[28];
	end
	if (
		( Inst_expected_prev[29] !== 1'bx ) && ( Inst_prev[29] !== Inst_expected_prev[29] )
		&& ((Inst_expected_prev[29] !== last_Inst_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[29] = Inst_expected_prev[29];
	end
	if (
		( Inst_expected_prev[30] !== 1'bx ) && ( Inst_prev[30] !== Inst_expected_prev[30] )
		&& ((Inst_expected_prev[30] !== last_Inst_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[30] = Inst_expected_prev[30];
	end
	if (
		( Inst_expected_prev[31] !== 1'bx ) && ( Inst_prev[31] !== Inst_expected_prev[31] )
		&& ((Inst_expected_prev[31] !== last_Inst_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Inst[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Inst_expected_prev);
		$display ("     Real value = %b", Inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Inst_exp[31] = Inst_expected_prev[31];
	end
	if (
		( PCSrcM_expected_prev !== 1'bx ) && ( PCSrcM_prev !== PCSrcM_expected_prev )
		&& ((PCSrcM_expected_prev !== last_PCSrcM_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCSrcM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCSrcM_expected_prev);
		$display ("     Real value = %b", PCSrcM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PCSrcM_exp = PCSrcM_expected_prev;
	end
	if (
		( PC_out_expected_prev[0] !== 1'bx ) && ( PC_out_prev[0] !== PC_out_expected_prev[0] )
		&& ((PC_out_expected_prev[0] !== last_PC_out_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[0] = PC_out_expected_prev[0];
	end
	if (
		( PC_out_expected_prev[1] !== 1'bx ) && ( PC_out_prev[1] !== PC_out_expected_prev[1] )
		&& ((PC_out_expected_prev[1] !== last_PC_out_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[1] = PC_out_expected_prev[1];
	end
	if (
		( PC_out_expected_prev[2] !== 1'bx ) && ( PC_out_prev[2] !== PC_out_expected_prev[2] )
		&& ((PC_out_expected_prev[2] !== last_PC_out_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[2] = PC_out_expected_prev[2];
	end
	if (
		( PC_out_expected_prev[3] !== 1'bx ) && ( PC_out_prev[3] !== PC_out_expected_prev[3] )
		&& ((PC_out_expected_prev[3] !== last_PC_out_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[3] = PC_out_expected_prev[3];
	end
	if (
		( PC_out_expected_prev[4] !== 1'bx ) && ( PC_out_prev[4] !== PC_out_expected_prev[4] )
		&& ((PC_out_expected_prev[4] !== last_PC_out_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[4] = PC_out_expected_prev[4];
	end
	if (
		( PC_out_expected_prev[5] !== 1'bx ) && ( PC_out_prev[5] !== PC_out_expected_prev[5] )
		&& ((PC_out_expected_prev[5] !== last_PC_out_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[5] = PC_out_expected_prev[5];
	end
	if (
		( PC_out_expected_prev[6] !== 1'bx ) && ( PC_out_prev[6] !== PC_out_expected_prev[6] )
		&& ((PC_out_expected_prev[6] !== last_PC_out_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[6] = PC_out_expected_prev[6];
	end
	if (
		( PC_out_expected_prev[7] !== 1'bx ) && ( PC_out_prev[7] !== PC_out_expected_prev[7] )
		&& ((PC_out_expected_prev[7] !== last_PC_out_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[7] = PC_out_expected_prev[7];
	end
	if (
		( PC_out_expected_prev[8] !== 1'bx ) && ( PC_out_prev[8] !== PC_out_expected_prev[8] )
		&& ((PC_out_expected_prev[8] !== last_PC_out_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[8] = PC_out_expected_prev[8];
	end
	if (
		( PC_out_expected_prev[9] !== 1'bx ) && ( PC_out_prev[9] !== PC_out_expected_prev[9] )
		&& ((PC_out_expected_prev[9] !== last_PC_out_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[9] = PC_out_expected_prev[9];
	end
	if (
		( PC_out_expected_prev[10] !== 1'bx ) && ( PC_out_prev[10] !== PC_out_expected_prev[10] )
		&& ((PC_out_expected_prev[10] !== last_PC_out_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[10] = PC_out_expected_prev[10];
	end
	if (
		( PC_out_expected_prev[11] !== 1'bx ) && ( PC_out_prev[11] !== PC_out_expected_prev[11] )
		&& ((PC_out_expected_prev[11] !== last_PC_out_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[11] = PC_out_expected_prev[11];
	end
	if (
		( PC_out_expected_prev[12] !== 1'bx ) && ( PC_out_prev[12] !== PC_out_expected_prev[12] )
		&& ((PC_out_expected_prev[12] !== last_PC_out_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[12] = PC_out_expected_prev[12];
	end
	if (
		( PC_out_expected_prev[13] !== 1'bx ) && ( PC_out_prev[13] !== PC_out_expected_prev[13] )
		&& ((PC_out_expected_prev[13] !== last_PC_out_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[13] = PC_out_expected_prev[13];
	end
	if (
		( PC_out_expected_prev[14] !== 1'bx ) && ( PC_out_prev[14] !== PC_out_expected_prev[14] )
		&& ((PC_out_expected_prev[14] !== last_PC_out_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[14] = PC_out_expected_prev[14];
	end
	if (
		( PC_out_expected_prev[15] !== 1'bx ) && ( PC_out_prev[15] !== PC_out_expected_prev[15] )
		&& ((PC_out_expected_prev[15] !== last_PC_out_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[15] = PC_out_expected_prev[15];
	end
	if (
		( PC_out_expected_prev[16] !== 1'bx ) && ( PC_out_prev[16] !== PC_out_expected_prev[16] )
		&& ((PC_out_expected_prev[16] !== last_PC_out_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[16] = PC_out_expected_prev[16];
	end
	if (
		( PC_out_expected_prev[17] !== 1'bx ) && ( PC_out_prev[17] !== PC_out_expected_prev[17] )
		&& ((PC_out_expected_prev[17] !== last_PC_out_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[17] = PC_out_expected_prev[17];
	end
	if (
		( PC_out_expected_prev[18] !== 1'bx ) && ( PC_out_prev[18] !== PC_out_expected_prev[18] )
		&& ((PC_out_expected_prev[18] !== last_PC_out_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[18] = PC_out_expected_prev[18];
	end
	if (
		( PC_out_expected_prev[19] !== 1'bx ) && ( PC_out_prev[19] !== PC_out_expected_prev[19] )
		&& ((PC_out_expected_prev[19] !== last_PC_out_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[19] = PC_out_expected_prev[19];
	end
	if (
		( PC_out_expected_prev[20] !== 1'bx ) && ( PC_out_prev[20] !== PC_out_expected_prev[20] )
		&& ((PC_out_expected_prev[20] !== last_PC_out_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[20] = PC_out_expected_prev[20];
	end
	if (
		( PC_out_expected_prev[21] !== 1'bx ) && ( PC_out_prev[21] !== PC_out_expected_prev[21] )
		&& ((PC_out_expected_prev[21] !== last_PC_out_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[21] = PC_out_expected_prev[21];
	end
	if (
		( PC_out_expected_prev[22] !== 1'bx ) && ( PC_out_prev[22] !== PC_out_expected_prev[22] )
		&& ((PC_out_expected_prev[22] !== last_PC_out_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[22] = PC_out_expected_prev[22];
	end
	if (
		( PC_out_expected_prev[23] !== 1'bx ) && ( PC_out_prev[23] !== PC_out_expected_prev[23] )
		&& ((PC_out_expected_prev[23] !== last_PC_out_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[23] = PC_out_expected_prev[23];
	end
	if (
		( PC_out_expected_prev[24] !== 1'bx ) && ( PC_out_prev[24] !== PC_out_expected_prev[24] )
		&& ((PC_out_expected_prev[24] !== last_PC_out_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[24] = PC_out_expected_prev[24];
	end
	if (
		( PC_out_expected_prev[25] !== 1'bx ) && ( PC_out_prev[25] !== PC_out_expected_prev[25] )
		&& ((PC_out_expected_prev[25] !== last_PC_out_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[25] = PC_out_expected_prev[25];
	end
	if (
		( PC_out_expected_prev[26] !== 1'bx ) && ( PC_out_prev[26] !== PC_out_expected_prev[26] )
		&& ((PC_out_expected_prev[26] !== last_PC_out_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[26] = PC_out_expected_prev[26];
	end
	if (
		( PC_out_expected_prev[27] !== 1'bx ) && ( PC_out_prev[27] !== PC_out_expected_prev[27] )
		&& ((PC_out_expected_prev[27] !== last_PC_out_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[27] = PC_out_expected_prev[27];
	end
	if (
		( PC_out_expected_prev[28] !== 1'bx ) && ( PC_out_prev[28] !== PC_out_expected_prev[28] )
		&& ((PC_out_expected_prev[28] !== last_PC_out_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[28] = PC_out_expected_prev[28];
	end
	if (
		( PC_out_expected_prev[29] !== 1'bx ) && ( PC_out_prev[29] !== PC_out_expected_prev[29] )
		&& ((PC_out_expected_prev[29] !== last_PC_out_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[29] = PC_out_expected_prev[29];
	end
	if (
		( PC_out_expected_prev[30] !== 1'bx ) && ( PC_out_prev[30] !== PC_out_expected_prev[30] )
		&& ((PC_out_expected_prev[30] !== last_PC_out_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[30] = PC_out_expected_prev[30];
	end
	if (
		( PC_out_expected_prev[31] !== 1'bx ) && ( PC_out_prev[31] !== PC_out_expected_prev[31] )
		&& ((PC_out_expected_prev[31] !== last_PC_out_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_out_exp[31] = PC_out_expected_prev[31];
	end
	if (
		( RD1_expected_prev[0] !== 1'bx ) && ( RD1_prev[0] !== RD1_expected_prev[0] )
		&& ((RD1_expected_prev[0] !== last_RD1_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[0] = RD1_expected_prev[0];
	end
	if (
		( RD1_expected_prev[1] !== 1'bx ) && ( RD1_prev[1] !== RD1_expected_prev[1] )
		&& ((RD1_expected_prev[1] !== last_RD1_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[1] = RD1_expected_prev[1];
	end
	if (
		( RD1_expected_prev[2] !== 1'bx ) && ( RD1_prev[2] !== RD1_expected_prev[2] )
		&& ((RD1_expected_prev[2] !== last_RD1_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[2] = RD1_expected_prev[2];
	end
	if (
		( RD1_expected_prev[3] !== 1'bx ) && ( RD1_prev[3] !== RD1_expected_prev[3] )
		&& ((RD1_expected_prev[3] !== last_RD1_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[3] = RD1_expected_prev[3];
	end
	if (
		( RD1_expected_prev[4] !== 1'bx ) && ( RD1_prev[4] !== RD1_expected_prev[4] )
		&& ((RD1_expected_prev[4] !== last_RD1_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[4] = RD1_expected_prev[4];
	end
	if (
		( RD1_expected_prev[5] !== 1'bx ) && ( RD1_prev[5] !== RD1_expected_prev[5] )
		&& ((RD1_expected_prev[5] !== last_RD1_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[5] = RD1_expected_prev[5];
	end
	if (
		( RD1_expected_prev[6] !== 1'bx ) && ( RD1_prev[6] !== RD1_expected_prev[6] )
		&& ((RD1_expected_prev[6] !== last_RD1_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[6] = RD1_expected_prev[6];
	end
	if (
		( RD1_expected_prev[7] !== 1'bx ) && ( RD1_prev[7] !== RD1_expected_prev[7] )
		&& ((RD1_expected_prev[7] !== last_RD1_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[7] = RD1_expected_prev[7];
	end
	if (
		( RD1_expected_prev[8] !== 1'bx ) && ( RD1_prev[8] !== RD1_expected_prev[8] )
		&& ((RD1_expected_prev[8] !== last_RD1_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[8] = RD1_expected_prev[8];
	end
	if (
		( RD1_expected_prev[9] !== 1'bx ) && ( RD1_prev[9] !== RD1_expected_prev[9] )
		&& ((RD1_expected_prev[9] !== last_RD1_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[9] = RD1_expected_prev[9];
	end
	if (
		( RD1_expected_prev[10] !== 1'bx ) && ( RD1_prev[10] !== RD1_expected_prev[10] )
		&& ((RD1_expected_prev[10] !== last_RD1_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[10] = RD1_expected_prev[10];
	end
	if (
		( RD1_expected_prev[11] !== 1'bx ) && ( RD1_prev[11] !== RD1_expected_prev[11] )
		&& ((RD1_expected_prev[11] !== last_RD1_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[11] = RD1_expected_prev[11];
	end
	if (
		( RD1_expected_prev[12] !== 1'bx ) && ( RD1_prev[12] !== RD1_expected_prev[12] )
		&& ((RD1_expected_prev[12] !== last_RD1_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[12] = RD1_expected_prev[12];
	end
	if (
		( RD1_expected_prev[13] !== 1'bx ) && ( RD1_prev[13] !== RD1_expected_prev[13] )
		&& ((RD1_expected_prev[13] !== last_RD1_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[13] = RD1_expected_prev[13];
	end
	if (
		( RD1_expected_prev[14] !== 1'bx ) && ( RD1_prev[14] !== RD1_expected_prev[14] )
		&& ((RD1_expected_prev[14] !== last_RD1_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[14] = RD1_expected_prev[14];
	end
	if (
		( RD1_expected_prev[15] !== 1'bx ) && ( RD1_prev[15] !== RD1_expected_prev[15] )
		&& ((RD1_expected_prev[15] !== last_RD1_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[15] = RD1_expected_prev[15];
	end
	if (
		( RD1_expected_prev[16] !== 1'bx ) && ( RD1_prev[16] !== RD1_expected_prev[16] )
		&& ((RD1_expected_prev[16] !== last_RD1_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[16] = RD1_expected_prev[16];
	end
	if (
		( RD1_expected_prev[17] !== 1'bx ) && ( RD1_prev[17] !== RD1_expected_prev[17] )
		&& ((RD1_expected_prev[17] !== last_RD1_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[17] = RD1_expected_prev[17];
	end
	if (
		( RD1_expected_prev[18] !== 1'bx ) && ( RD1_prev[18] !== RD1_expected_prev[18] )
		&& ((RD1_expected_prev[18] !== last_RD1_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[18] = RD1_expected_prev[18];
	end
	if (
		( RD1_expected_prev[19] !== 1'bx ) && ( RD1_prev[19] !== RD1_expected_prev[19] )
		&& ((RD1_expected_prev[19] !== last_RD1_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[19] = RD1_expected_prev[19];
	end
	if (
		( RD1_expected_prev[20] !== 1'bx ) && ( RD1_prev[20] !== RD1_expected_prev[20] )
		&& ((RD1_expected_prev[20] !== last_RD1_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[20] = RD1_expected_prev[20];
	end
	if (
		( RD1_expected_prev[21] !== 1'bx ) && ( RD1_prev[21] !== RD1_expected_prev[21] )
		&& ((RD1_expected_prev[21] !== last_RD1_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[21] = RD1_expected_prev[21];
	end
	if (
		( RD1_expected_prev[22] !== 1'bx ) && ( RD1_prev[22] !== RD1_expected_prev[22] )
		&& ((RD1_expected_prev[22] !== last_RD1_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[22] = RD1_expected_prev[22];
	end
	if (
		( RD1_expected_prev[23] !== 1'bx ) && ( RD1_prev[23] !== RD1_expected_prev[23] )
		&& ((RD1_expected_prev[23] !== last_RD1_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[23] = RD1_expected_prev[23];
	end
	if (
		( RD1_expected_prev[24] !== 1'bx ) && ( RD1_prev[24] !== RD1_expected_prev[24] )
		&& ((RD1_expected_prev[24] !== last_RD1_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[24] = RD1_expected_prev[24];
	end
	if (
		( RD1_expected_prev[25] !== 1'bx ) && ( RD1_prev[25] !== RD1_expected_prev[25] )
		&& ((RD1_expected_prev[25] !== last_RD1_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[25] = RD1_expected_prev[25];
	end
	if (
		( RD1_expected_prev[26] !== 1'bx ) && ( RD1_prev[26] !== RD1_expected_prev[26] )
		&& ((RD1_expected_prev[26] !== last_RD1_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[26] = RD1_expected_prev[26];
	end
	if (
		( RD1_expected_prev[27] !== 1'bx ) && ( RD1_prev[27] !== RD1_expected_prev[27] )
		&& ((RD1_expected_prev[27] !== last_RD1_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[27] = RD1_expected_prev[27];
	end
	if (
		( RD1_expected_prev[28] !== 1'bx ) && ( RD1_prev[28] !== RD1_expected_prev[28] )
		&& ((RD1_expected_prev[28] !== last_RD1_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[28] = RD1_expected_prev[28];
	end
	if (
		( RD1_expected_prev[29] !== 1'bx ) && ( RD1_prev[29] !== RD1_expected_prev[29] )
		&& ((RD1_expected_prev[29] !== last_RD1_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[29] = RD1_expected_prev[29];
	end
	if (
		( RD1_expected_prev[30] !== 1'bx ) && ( RD1_prev[30] !== RD1_expected_prev[30] )
		&& ((RD1_expected_prev[30] !== last_RD1_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[30] = RD1_expected_prev[30];
	end
	if (
		( RD1_expected_prev[31] !== 1'bx ) && ( RD1_prev[31] !== RD1_expected_prev[31] )
		&& ((RD1_expected_prev[31] !== last_RD1_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RD1_exp[31] = RD1_expected_prev[31];
	end
	if (
		( RD2_expected_prev[0] !== 1'bx ) && ( RD2_prev[0] !== RD2_expected_prev[0] )
		&& ((RD2_expected_prev[0] !== last_RD2_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[0] = RD2_expected_prev[0];
	end
	if (
		( RD2_expected_prev[1] !== 1'bx ) && ( RD2_prev[1] !== RD2_expected_prev[1] )
		&& ((RD2_expected_prev[1] !== last_RD2_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[1] = RD2_expected_prev[1];
	end
	if (
		( RD2_expected_prev[2] !== 1'bx ) && ( RD2_prev[2] !== RD2_expected_prev[2] )
		&& ((RD2_expected_prev[2] !== last_RD2_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[2] = RD2_expected_prev[2];
	end
	if (
		( RD2_expected_prev[3] !== 1'bx ) && ( RD2_prev[3] !== RD2_expected_prev[3] )
		&& ((RD2_expected_prev[3] !== last_RD2_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[3] = RD2_expected_prev[3];
	end
	if (
		( RD2_expected_prev[4] !== 1'bx ) && ( RD2_prev[4] !== RD2_expected_prev[4] )
		&& ((RD2_expected_prev[4] !== last_RD2_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[4] = RD2_expected_prev[4];
	end
	if (
		( RD2_expected_prev[5] !== 1'bx ) && ( RD2_prev[5] !== RD2_expected_prev[5] )
		&& ((RD2_expected_prev[5] !== last_RD2_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[5] = RD2_expected_prev[5];
	end
	if (
		( RD2_expected_prev[6] !== 1'bx ) && ( RD2_prev[6] !== RD2_expected_prev[6] )
		&& ((RD2_expected_prev[6] !== last_RD2_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[6] = RD2_expected_prev[6];
	end
	if (
		( RD2_expected_prev[7] !== 1'bx ) && ( RD2_prev[7] !== RD2_expected_prev[7] )
		&& ((RD2_expected_prev[7] !== last_RD2_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[7] = RD2_expected_prev[7];
	end
	if (
		( RD2_expected_prev[8] !== 1'bx ) && ( RD2_prev[8] !== RD2_expected_prev[8] )
		&& ((RD2_expected_prev[8] !== last_RD2_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[8] = RD2_expected_prev[8];
	end
	if (
		( RD2_expected_prev[9] !== 1'bx ) && ( RD2_prev[9] !== RD2_expected_prev[9] )
		&& ((RD2_expected_prev[9] !== last_RD2_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[9] = RD2_expected_prev[9];
	end
	if (
		( RD2_expected_prev[10] !== 1'bx ) && ( RD2_prev[10] !== RD2_expected_prev[10] )
		&& ((RD2_expected_prev[10] !== last_RD2_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[10] = RD2_expected_prev[10];
	end
	if (
		( RD2_expected_prev[11] !== 1'bx ) && ( RD2_prev[11] !== RD2_expected_prev[11] )
		&& ((RD2_expected_prev[11] !== last_RD2_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[11] = RD2_expected_prev[11];
	end
	if (
		( RD2_expected_prev[12] !== 1'bx ) && ( RD2_prev[12] !== RD2_expected_prev[12] )
		&& ((RD2_expected_prev[12] !== last_RD2_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[12] = RD2_expected_prev[12];
	end
	if (
		( RD2_expected_prev[13] !== 1'bx ) && ( RD2_prev[13] !== RD2_expected_prev[13] )
		&& ((RD2_expected_prev[13] !== last_RD2_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[13] = RD2_expected_prev[13];
	end
	if (
		( RD2_expected_prev[14] !== 1'bx ) && ( RD2_prev[14] !== RD2_expected_prev[14] )
		&& ((RD2_expected_prev[14] !== last_RD2_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[14] = RD2_expected_prev[14];
	end
	if (
		( RD2_expected_prev[15] !== 1'bx ) && ( RD2_prev[15] !== RD2_expected_prev[15] )
		&& ((RD2_expected_prev[15] !== last_RD2_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[15] = RD2_expected_prev[15];
	end
	if (
		( RD2_expected_prev[16] !== 1'bx ) && ( RD2_prev[16] !== RD2_expected_prev[16] )
		&& ((RD2_expected_prev[16] !== last_RD2_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[16] = RD2_expected_prev[16];
	end
	if (
		( RD2_expected_prev[17] !== 1'bx ) && ( RD2_prev[17] !== RD2_expected_prev[17] )
		&& ((RD2_expected_prev[17] !== last_RD2_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[17] = RD2_expected_prev[17];
	end
	if (
		( RD2_expected_prev[18] !== 1'bx ) && ( RD2_prev[18] !== RD2_expected_prev[18] )
		&& ((RD2_expected_prev[18] !== last_RD2_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[18] = RD2_expected_prev[18];
	end
	if (
		( RD2_expected_prev[19] !== 1'bx ) && ( RD2_prev[19] !== RD2_expected_prev[19] )
		&& ((RD2_expected_prev[19] !== last_RD2_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[19] = RD2_expected_prev[19];
	end
	if (
		( RD2_expected_prev[20] !== 1'bx ) && ( RD2_prev[20] !== RD2_expected_prev[20] )
		&& ((RD2_expected_prev[20] !== last_RD2_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[20] = RD2_expected_prev[20];
	end
	if (
		( RD2_expected_prev[21] !== 1'bx ) && ( RD2_prev[21] !== RD2_expected_prev[21] )
		&& ((RD2_expected_prev[21] !== last_RD2_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[21] = RD2_expected_prev[21];
	end
	if (
		( RD2_expected_prev[22] !== 1'bx ) && ( RD2_prev[22] !== RD2_expected_prev[22] )
		&& ((RD2_expected_prev[22] !== last_RD2_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[22] = RD2_expected_prev[22];
	end
	if (
		( RD2_expected_prev[23] !== 1'bx ) && ( RD2_prev[23] !== RD2_expected_prev[23] )
		&& ((RD2_expected_prev[23] !== last_RD2_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[23] = RD2_expected_prev[23];
	end
	if (
		( RD2_expected_prev[24] !== 1'bx ) && ( RD2_prev[24] !== RD2_expected_prev[24] )
		&& ((RD2_expected_prev[24] !== last_RD2_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[24] = RD2_expected_prev[24];
	end
	if (
		( RD2_expected_prev[25] !== 1'bx ) && ( RD2_prev[25] !== RD2_expected_prev[25] )
		&& ((RD2_expected_prev[25] !== last_RD2_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[25] = RD2_expected_prev[25];
	end
	if (
		( RD2_expected_prev[26] !== 1'bx ) && ( RD2_prev[26] !== RD2_expected_prev[26] )
		&& ((RD2_expected_prev[26] !== last_RD2_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[26] = RD2_expected_prev[26];
	end
	if (
		( RD2_expected_prev[27] !== 1'bx ) && ( RD2_prev[27] !== RD2_expected_prev[27] )
		&& ((RD2_expected_prev[27] !== last_RD2_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[27] = RD2_expected_prev[27];
	end
	if (
		( RD2_expected_prev[28] !== 1'bx ) && ( RD2_prev[28] !== RD2_expected_prev[28] )
		&& ((RD2_expected_prev[28] !== last_RD2_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[28] = RD2_expected_prev[28];
	end
	if (
		( RD2_expected_prev[29] !== 1'bx ) && ( RD2_prev[29] !== RD2_expected_prev[29] )
		&& ((RD2_expected_prev[29] !== last_RD2_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[29] = RD2_expected_prev[29];
	end
	if (
		( RD2_expected_prev[30] !== 1'bx ) && ( RD2_prev[30] !== RD2_expected_prev[30] )
		&& ((RD2_expected_prev[30] !== last_RD2_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[30] = RD2_expected_prev[30];
	end
	if (
		( RD2_expected_prev[31] !== 1'bx ) && ( RD2_prev[31] !== RD2_expected_prev[31] )
		&& ((RD2_expected_prev[31] !== last_RD2_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD2_exp[31] = RD2_expected_prev[31];
	end
	if (
		( REGWr_expected_prev !== 1'bx ) && ( REGWr_prev !== REGWr_expected_prev )
		&& ((REGWr_expected_prev !== last_REGWr_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGWr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGWr_expected_prev);
		$display ("     Real value = %b", REGWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_REGWr_exp = REGWr_expected_prev;
	end
	if (
		( ReadDataW_expected_prev[0] !== 1'bx ) && ( ReadDataW_prev[0] !== ReadDataW_expected_prev[0] )
		&& ((ReadDataW_expected_prev[0] !== last_ReadDataW_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[0] = ReadDataW_expected_prev[0];
	end
	if (
		( ReadDataW_expected_prev[1] !== 1'bx ) && ( ReadDataW_prev[1] !== ReadDataW_expected_prev[1] )
		&& ((ReadDataW_expected_prev[1] !== last_ReadDataW_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[1] = ReadDataW_expected_prev[1];
	end
	if (
		( ReadDataW_expected_prev[2] !== 1'bx ) && ( ReadDataW_prev[2] !== ReadDataW_expected_prev[2] )
		&& ((ReadDataW_expected_prev[2] !== last_ReadDataW_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[2] = ReadDataW_expected_prev[2];
	end
	if (
		( ReadDataW_expected_prev[3] !== 1'bx ) && ( ReadDataW_prev[3] !== ReadDataW_expected_prev[3] )
		&& ((ReadDataW_expected_prev[3] !== last_ReadDataW_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[3] = ReadDataW_expected_prev[3];
	end
	if (
		( ReadDataW_expected_prev[4] !== 1'bx ) && ( ReadDataW_prev[4] !== ReadDataW_expected_prev[4] )
		&& ((ReadDataW_expected_prev[4] !== last_ReadDataW_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[4] = ReadDataW_expected_prev[4];
	end
	if (
		( ReadDataW_expected_prev[5] !== 1'bx ) && ( ReadDataW_prev[5] !== ReadDataW_expected_prev[5] )
		&& ((ReadDataW_expected_prev[5] !== last_ReadDataW_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[5] = ReadDataW_expected_prev[5];
	end
	if (
		( ReadDataW_expected_prev[6] !== 1'bx ) && ( ReadDataW_prev[6] !== ReadDataW_expected_prev[6] )
		&& ((ReadDataW_expected_prev[6] !== last_ReadDataW_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[6] = ReadDataW_expected_prev[6];
	end
	if (
		( ReadDataW_expected_prev[7] !== 1'bx ) && ( ReadDataW_prev[7] !== ReadDataW_expected_prev[7] )
		&& ((ReadDataW_expected_prev[7] !== last_ReadDataW_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[7] = ReadDataW_expected_prev[7];
	end
	if (
		( ReadDataW_expected_prev[8] !== 1'bx ) && ( ReadDataW_prev[8] !== ReadDataW_expected_prev[8] )
		&& ((ReadDataW_expected_prev[8] !== last_ReadDataW_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[8] = ReadDataW_expected_prev[8];
	end
	if (
		( ReadDataW_expected_prev[9] !== 1'bx ) && ( ReadDataW_prev[9] !== ReadDataW_expected_prev[9] )
		&& ((ReadDataW_expected_prev[9] !== last_ReadDataW_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[9] = ReadDataW_expected_prev[9];
	end
	if (
		( ReadDataW_expected_prev[10] !== 1'bx ) && ( ReadDataW_prev[10] !== ReadDataW_expected_prev[10] )
		&& ((ReadDataW_expected_prev[10] !== last_ReadDataW_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[10] = ReadDataW_expected_prev[10];
	end
	if (
		( ReadDataW_expected_prev[11] !== 1'bx ) && ( ReadDataW_prev[11] !== ReadDataW_expected_prev[11] )
		&& ((ReadDataW_expected_prev[11] !== last_ReadDataW_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[11] = ReadDataW_expected_prev[11];
	end
	if (
		( ReadDataW_expected_prev[12] !== 1'bx ) && ( ReadDataW_prev[12] !== ReadDataW_expected_prev[12] )
		&& ((ReadDataW_expected_prev[12] !== last_ReadDataW_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[12] = ReadDataW_expected_prev[12];
	end
	if (
		( ReadDataW_expected_prev[13] !== 1'bx ) && ( ReadDataW_prev[13] !== ReadDataW_expected_prev[13] )
		&& ((ReadDataW_expected_prev[13] !== last_ReadDataW_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[13] = ReadDataW_expected_prev[13];
	end
	if (
		( ReadDataW_expected_prev[14] !== 1'bx ) && ( ReadDataW_prev[14] !== ReadDataW_expected_prev[14] )
		&& ((ReadDataW_expected_prev[14] !== last_ReadDataW_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[14] = ReadDataW_expected_prev[14];
	end
	if (
		( ReadDataW_expected_prev[15] !== 1'bx ) && ( ReadDataW_prev[15] !== ReadDataW_expected_prev[15] )
		&& ((ReadDataW_expected_prev[15] !== last_ReadDataW_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[15] = ReadDataW_expected_prev[15];
	end
	if (
		( ReadDataW_expected_prev[16] !== 1'bx ) && ( ReadDataW_prev[16] !== ReadDataW_expected_prev[16] )
		&& ((ReadDataW_expected_prev[16] !== last_ReadDataW_exp[16]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[16] = ReadDataW_expected_prev[16];
	end
	if (
		( ReadDataW_expected_prev[17] !== 1'bx ) && ( ReadDataW_prev[17] !== ReadDataW_expected_prev[17] )
		&& ((ReadDataW_expected_prev[17] !== last_ReadDataW_exp[17]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[17] = ReadDataW_expected_prev[17];
	end
	if (
		( ReadDataW_expected_prev[18] !== 1'bx ) && ( ReadDataW_prev[18] !== ReadDataW_expected_prev[18] )
		&& ((ReadDataW_expected_prev[18] !== last_ReadDataW_exp[18]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[18] = ReadDataW_expected_prev[18];
	end
	if (
		( ReadDataW_expected_prev[19] !== 1'bx ) && ( ReadDataW_prev[19] !== ReadDataW_expected_prev[19] )
		&& ((ReadDataW_expected_prev[19] !== last_ReadDataW_exp[19]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[19] = ReadDataW_expected_prev[19];
	end
	if (
		( ReadDataW_expected_prev[20] !== 1'bx ) && ( ReadDataW_prev[20] !== ReadDataW_expected_prev[20] )
		&& ((ReadDataW_expected_prev[20] !== last_ReadDataW_exp[20]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[20] = ReadDataW_expected_prev[20];
	end
	if (
		( ReadDataW_expected_prev[21] !== 1'bx ) && ( ReadDataW_prev[21] !== ReadDataW_expected_prev[21] )
		&& ((ReadDataW_expected_prev[21] !== last_ReadDataW_exp[21]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[21] = ReadDataW_expected_prev[21];
	end
	if (
		( ReadDataW_expected_prev[22] !== 1'bx ) && ( ReadDataW_prev[22] !== ReadDataW_expected_prev[22] )
		&& ((ReadDataW_expected_prev[22] !== last_ReadDataW_exp[22]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[22] = ReadDataW_expected_prev[22];
	end
	if (
		( ReadDataW_expected_prev[23] !== 1'bx ) && ( ReadDataW_prev[23] !== ReadDataW_expected_prev[23] )
		&& ((ReadDataW_expected_prev[23] !== last_ReadDataW_exp[23]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[23] = ReadDataW_expected_prev[23];
	end
	if (
		( ReadDataW_expected_prev[24] !== 1'bx ) && ( ReadDataW_prev[24] !== ReadDataW_expected_prev[24] )
		&& ((ReadDataW_expected_prev[24] !== last_ReadDataW_exp[24]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[24] = ReadDataW_expected_prev[24];
	end
	if (
		( ReadDataW_expected_prev[25] !== 1'bx ) && ( ReadDataW_prev[25] !== ReadDataW_expected_prev[25] )
		&& ((ReadDataW_expected_prev[25] !== last_ReadDataW_exp[25]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[25] = ReadDataW_expected_prev[25];
	end
	if (
		( ReadDataW_expected_prev[26] !== 1'bx ) && ( ReadDataW_prev[26] !== ReadDataW_expected_prev[26] )
		&& ((ReadDataW_expected_prev[26] !== last_ReadDataW_exp[26]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[26] = ReadDataW_expected_prev[26];
	end
	if (
		( ReadDataW_expected_prev[27] !== 1'bx ) && ( ReadDataW_prev[27] !== ReadDataW_expected_prev[27] )
		&& ((ReadDataW_expected_prev[27] !== last_ReadDataW_exp[27]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[27] = ReadDataW_expected_prev[27];
	end
	if (
		( ReadDataW_expected_prev[28] !== 1'bx ) && ( ReadDataW_prev[28] !== ReadDataW_expected_prev[28] )
		&& ((ReadDataW_expected_prev[28] !== last_ReadDataW_exp[28]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[28] = ReadDataW_expected_prev[28];
	end
	if (
		( ReadDataW_expected_prev[29] !== 1'bx ) && ( ReadDataW_prev[29] !== ReadDataW_expected_prev[29] )
		&& ((ReadDataW_expected_prev[29] !== last_ReadDataW_exp[29]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[29] = ReadDataW_expected_prev[29];
	end
	if (
		( ReadDataW_expected_prev[30] !== 1'bx ) && ( ReadDataW_prev[30] !== ReadDataW_expected_prev[30] )
		&& ((ReadDataW_expected_prev[30] !== last_ReadDataW_exp[30]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[30] = ReadDataW_expected_prev[30];
	end
	if (
		( ReadDataW_expected_prev[31] !== 1'bx ) && ( ReadDataW_prev[31] !== ReadDataW_expected_prev[31] )
		&& ((ReadDataW_expected_prev[31] !== last_ReadDataW_exp[31]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadDataW[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadDataW_expected_prev);
		$display ("     Real value = %b", ReadDataW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ReadDataW_exp[31] = ReadDataW_expected_prev[31];
	end
	if (
		( condEx_expected_prev !== 1'bx ) && ( condEx_prev !== condEx_expected_prev )
		&& ((condEx_expected_prev !== last_condEx_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condEx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condEx_expected_prev);
		$display ("     Real value = %b", condEx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_condEx_exp = condEx_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module topmodule_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire [3:0] ALUCnt;
wire [3:0] ALUFlags_w;
wire [31:0] ALUOutW;
wire [3:0] CondE;
wire [1:0] FlagWrite;
wire [1:0] FlagWriteD;
wire [1:0] FlagWriteE;
wire [3:0] Flags;
wire [31:0] Inst;
wire PCSrcM;
wire [31:0] PC_out;
wire [31:0] RD1;
wire [31:0] RD2;
wire REGWr;
wire [31:0] ReadDataW;
wire condEx;

wire sampler;                             

// assign statements (if any)                          
topmodule i1 (
// port map - connection between master ports and signals/registers   
	.ALUCnt(ALUCnt),
	.ALUFlags_w(ALUFlags_w),
	.ALUOutW(ALUOutW),
	.CondE(CondE),
	.FlagWrite(FlagWrite),
	.FlagWriteD(FlagWriteD),
	.FlagWriteE(FlagWriteE),
	.Flags(Flags),
	.Inst(Inst),
	.PCSrcM(PCSrcM),
	.PC_out(PC_out),
	.RD1(RD1),
	.RD2(RD2),
	.REGWr(REGWr),
	.ReadDataW(ReadDataW),
	.clk(clk),
	.condEx(condEx),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #50000 1'b1;
	rst = #50000 1'b0;
end 

topmodule_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

topmodule_vlg_check_tst tb_out(
	.ALUCnt(ALUCnt),
	.ALUFlags_w(ALUFlags_w),
	.ALUOutW(ALUOutW),
	.CondE(CondE),
	.FlagWrite(FlagWrite),
	.FlagWriteD(FlagWriteD),
	.FlagWriteE(FlagWriteE),
	.Flags(Flags),
	.Inst(Inst),
	.PCSrcM(PCSrcM),
	.PC_out(PC_out),
	.RD1(RD1),
	.RD2(RD2),
	.REGWr(REGWr),
	.ReadDataW(ReadDataW),
	.condEx(condEx),
	.sampler_rx(sampler)
);
endmodule

