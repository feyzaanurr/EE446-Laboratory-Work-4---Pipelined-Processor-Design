// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2023 23:05:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ConditionalLogic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ConditionalLogic_vlg_sample_tst(
	ALUFlags,
	Branch,
	Cond,
	FlagW,
	MemW,
	PCS,
	RegW,
	clk,
	rst,
	sampler_tx
);
input [3:0] ALUFlags;
input  Branch;
input [3:0] Cond;
input [1:0] FlagW;
input  MemW;
input  PCS;
input  RegW;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(ALUFlags or Branch or Cond or FlagW or MemW or PCS or RegW or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ConditionalLogic_vlg_check_tst (
	ALU_CI,
	CondEx,
	FlagWrite_w,
	Flags_wire,
	MemWrite,
	PCWrite,
	RegWrite,
	sampler_rx
);
input  ALU_CI;
input  CondEx;
input [1:0] FlagWrite_w;
input [3:0] Flags_wire;
input  MemWrite;
input  PCWrite;
input  RegWrite;
input sampler_rx;

reg  ALU_CI_expected;
reg  CondEx_expected;
reg [1:0] FlagWrite_w_expected;
reg [3:0] Flags_wire_expected;
reg  MemWrite_expected;
reg  PCWrite_expected;
reg  RegWrite_expected;

reg  ALU_CI_prev;
reg  CondEx_prev;
reg [1:0] FlagWrite_w_prev;
reg [3:0] Flags_wire_prev;
reg  MemWrite_prev;
reg  PCWrite_prev;
reg  RegWrite_prev;

reg  ALU_CI_expected_prev;
reg  CondEx_expected_prev;
reg [3:0] Flags_wire_expected_prev;
reg  MemWrite_expected_prev;
reg  PCWrite_expected_prev;
reg  RegWrite_expected_prev;

reg  last_ALU_CI_exp;
reg  last_CondEx_exp;
reg [3:0] last_Flags_wire_exp;
reg  last_MemWrite_exp;
reg  last_PCWrite_exp;
reg  last_RegWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_CI_prev = ALU_CI;
	CondEx_prev = CondEx;
	FlagWrite_w_prev = FlagWrite_w;
	Flags_wire_prev = Flags_wire;
	MemWrite_prev = MemWrite;
	PCWrite_prev = PCWrite;
	RegWrite_prev = RegWrite;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_CI_expected_prev = ALU_CI_expected;
	CondEx_expected_prev = CondEx_expected;
	Flags_wire_expected_prev = Flags_wire_expected;
	MemWrite_expected_prev = MemWrite_expected;
	PCWrite_expected_prev = PCWrite_expected;
	RegWrite_expected_prev = RegWrite_expected;
end



// expected CondEx
initial
begin
	CondEx_expected = 1'bX;
end 

// expected ALU_CI
initial
begin
	ALU_CI_expected = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 

// expected PCWrite
initial
begin
	PCWrite_expected = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 
// expected Flags_wire[ 3 ]
initial
begin
	Flags_wire_expected[3] = 1'bX;
end 
// expected Flags_wire[ 2 ]
initial
begin
	Flags_wire_expected[2] = 1'bX;
end 
// expected Flags_wire[ 1 ]
initial
begin
	Flags_wire_expected[1] = 1'bX;
end 
// expected Flags_wire[ 0 ]
initial
begin
	Flags_wire_expected[0] = 1'bX;
end 
// generate trigger
always @(ALU_CI_expected or ALU_CI or CondEx_expected or CondEx or FlagWrite_w_expected or FlagWrite_w or Flags_wire_expected or Flags_wire or MemWrite_expected or MemWrite or PCWrite_expected or PCWrite or RegWrite_expected or RegWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_CI = %b | expected CondEx = %b | expected FlagWrite_w = %b | expected Flags_wire = %b | expected MemWrite = %b | expected PCWrite = %b | expected RegWrite = %b | ",ALU_CI_expected_prev,CondEx_expected_prev,FlagWrite_w_expected_prev,Flags_wire_expected_prev,MemWrite_expected_prev,PCWrite_expected_prev,RegWrite_expected_prev);
	$display("| real ALU_CI = %b | real CondEx = %b | real FlagWrite_w = %b | real Flags_wire = %b | real MemWrite = %b | real PCWrite = %b | real RegWrite = %b | ",ALU_CI_prev,CondEx_prev,FlagWrite_w_prev,Flags_wire_prev,MemWrite_prev,PCWrite_prev,RegWrite_prev);
`endif
	if (
		( ALU_CI_expected_prev !== 1'bx ) && ( ALU_CI_prev !== ALU_CI_expected_prev )
		&& ((ALU_CI_expected_prev !== last_ALU_CI_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_CI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_CI_expected_prev);
		$display ("     Real value = %b", ALU_CI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_CI_exp = ALU_CI_expected_prev;
	end
	if (
		( CondEx_expected_prev !== 1'bx ) && ( CondEx_prev !== CondEx_expected_prev )
		&& ((CondEx_expected_prev !== last_CondEx_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CondEx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CondEx_expected_prev);
		$display ("     Real value = %b", CondEx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CondEx_exp = CondEx_expected_prev;
	end
	if (
		( Flags_wire_expected_prev[0] !== 1'bx ) && ( Flags_wire_prev[0] !== Flags_wire_expected_prev[0] )
		&& ((Flags_wire_expected_prev[0] !== last_Flags_wire_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags_wire[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_wire_expected_prev);
		$display ("     Real value = %b", Flags_wire_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Flags_wire_exp[0] = Flags_wire_expected_prev[0];
	end
	if (
		( Flags_wire_expected_prev[1] !== 1'bx ) && ( Flags_wire_prev[1] !== Flags_wire_expected_prev[1] )
		&& ((Flags_wire_expected_prev[1] !== last_Flags_wire_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags_wire[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_wire_expected_prev);
		$display ("     Real value = %b", Flags_wire_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Flags_wire_exp[1] = Flags_wire_expected_prev[1];
	end
	if (
		( Flags_wire_expected_prev[2] !== 1'bx ) && ( Flags_wire_prev[2] !== Flags_wire_expected_prev[2] )
		&& ((Flags_wire_expected_prev[2] !== last_Flags_wire_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags_wire[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_wire_expected_prev);
		$display ("     Real value = %b", Flags_wire_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Flags_wire_exp[2] = Flags_wire_expected_prev[2];
	end
	if (
		( Flags_wire_expected_prev[3] !== 1'bx ) && ( Flags_wire_prev[3] !== Flags_wire_expected_prev[3] )
		&& ((Flags_wire_expected_prev[3] !== last_Flags_wire_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flags_wire[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flags_wire_expected_prev);
		$display ("     Real value = %b", Flags_wire_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Flags_wire_exp[3] = Flags_wire_expected_prev[3];
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( PCWrite_expected_prev !== 1'bx ) && ( PCWrite_prev !== PCWrite_expected_prev )
		&& ((PCWrite_expected_prev !== last_PCWrite_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCWrite_expected_prev);
		$display ("     Real value = %b", PCWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PCWrite_exp = PCWrite_expected_prev;
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ConditionalLogic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ALUFlags;
reg Branch;
reg [3:0] Cond;
reg [1:0] FlagW;
reg MemW;
reg PCS;
reg RegW;
reg clk;
reg rst;
// wires                                               
wire ALU_CI;
wire CondEx;
wire [1:0] FlagWrite_w;
wire [3:0] Flags_wire;
wire MemWrite;
wire PCWrite;
wire RegWrite;

wire sampler;                             

// assign statements (if any)                          
ConditionalLogic i1 (
// port map - connection between master ports and signals/registers   
	.ALUFlags(ALUFlags),
	.ALU_CI(ALU_CI),
	.Branch(Branch),
	.Cond(Cond),
	.CondEx(CondEx),
	.FlagW(FlagW),
	.FlagWrite_w(FlagWrite_w),
	.Flags_wire(Flags_wire),
	.MemW(MemW),
	.MemWrite(MemWrite),
	.PCS(PCS),
	.PCWrite(PCWrite),
	.RegW(RegW),
	.RegWrite(RegWrite),
	.clk(clk),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// ALUFlags[ 3 ]
initial
begin
	ALUFlags[3] = 1'b0;
	ALUFlags[3] = #100000 1'b1;
	ALUFlags[3] = #200000 1'b0;
	ALUFlags[3] = #350000 1'b1;
	ALUFlags[3] = #50000 1'b0;
	ALUFlags[3] = #100000 1'b1;
	ALUFlags[3] = #100000 1'b0;
	ALUFlags[3] = #50000 1'b1;
end 
// ALUFlags[ 2 ]
initial
begin
	ALUFlags[2] = 1'b1;
	ALUFlags[2] = #250000 1'b0;
	ALUFlags[2] = #100000 1'b1;
	ALUFlags[2] = #50000 1'b0;
	ALUFlags[2] = #50000 1'b1;
	ALUFlags[2] = #300000 1'b0;
end 
// ALUFlags[ 1 ]
initial
begin
	ALUFlags[1] = 1'b0;
	ALUFlags[1] = #150000 1'b1;
	ALUFlags[1] = #50000 1'b0;
	ALUFlags[1] = #50000 1'b1;
	ALUFlags[1] = #100000 1'b0;
	ALUFlags[1] = #50000 1'b1;
	ALUFlags[1] = #200000 1'b0;
	ALUFlags[1] = #50000 1'b1;
	ALUFlags[1] = #100000 1'b0;
	ALUFlags[1] = #50000 1'b1;
	ALUFlags[1] = #150000 1'b0;
end 
// ALUFlags[ 0 ]
initial
begin
	ALUFlags[0] = 1'b0;
	ALUFlags[0] = #100000 1'b1;
	ALUFlags[0] = #100000 1'b0;
	ALUFlags[0] = #100000 1'b1;
	ALUFlags[0] = #100000 1'b0;
	ALUFlags[0] = #150000 1'b1;
	ALUFlags[0] = #100000 1'b0;
	ALUFlags[0] = #50000 1'b1;
	ALUFlags[0] = #50000 1'b0;
	ALUFlags[0] = #50000 1'b1;
	ALUFlags[0] = #50000 1'b0;
	ALUFlags[0] = #50000 1'b1;
	ALUFlags[0] = #50000 1'b0;
end 

// Branch
initial
begin
	Branch = 1'b1;
	Branch = #100000 1'b0;
	Branch = #50000 1'b1;
	Branch = #100000 1'b0;
	Branch = #50000 1'b1;
	Branch = #50000 1'b0;
	Branch = #100000 1'b1;
	Branch = #300000 1'b0;
end 
// Cond[ 3 ]
initial
begin
	Cond[3] = 1'b1;
	Cond[3] = #100000 1'b0;
end 
// Cond[ 2 ]
initial
begin
	Cond[2] = 1'b1;
	Cond[2] = #100000 1'b0;
end 
// Cond[ 1 ]
initial
begin
	Cond[1] = 1'b1;
	Cond[1] = #100000 1'b0;
end 
// Cond[ 0 ]
initial
begin
	Cond[0] = 1'b0;
end 
// FlagW[ 1 ]
initial
begin
	FlagW[1] = 1'b1;
end 
// FlagW[ 0 ]
initial
begin
	FlagW[0] = 1'b1;
end 

// PCS
initial
begin
	PCS = 1'b1;
	PCS = #50000 1'b0;
	PCS = #150000 1'b1;
	PCS = #100000 1'b0;
	PCS = #50000 1'b1;
	PCS = #50000 1'b0;
	PCS = #200000 1'b1;
	PCS = #100000 1'b0;
	PCS = #50000 1'b1;
	PCS = #50000 1'b0;
	PCS = #50000 1'b1;
	PCS = #100000 1'b0;
end 

// RegW
initial
begin
	RegW = 1'b0;
end 

// MemW
initial
begin
	MemW = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #50000 1'b0;
end 

ConditionalLogic_vlg_sample_tst tb_sample (
	.ALUFlags(ALUFlags),
	.Branch(Branch),
	.Cond(Cond),
	.FlagW(FlagW),
	.MemW(MemW),
	.PCS(PCS),
	.RegW(RegW),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

ConditionalLogic_vlg_check_tst tb_out(
	.ALU_CI(ALU_CI),
	.CondEx(CondEx),
	.FlagWrite_w(FlagWrite_w),
	.Flags_wire(Flags_wire),
	.MemWrite(MemWrite),
	.PCWrite(PCWrite),
	.RegWrite(RegWrite),
	.sampler_rx(sampler)
);
endmodule

